{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v5.json", "dbt_version": "1.1.0", "generated_at": "2022-11-02T17:24:39.900979Z", "invocation_id": "56b151a0-b63c-4ff2-b87c-05decd9b2c11", "env": {}, "project_id": "77babb0ffd0b2576fcd3ecb33ad869ec", "user_id": "e0288d5c-4d76-41ed-afd7-080af8fdeee9", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.data_profiling.eligibility_detail": {"raw_sql": "with eligibility as (\n\n    select * from {{ ref('base_eligibility') }}\n\n),\n\nseed_gender as (\n\n    select * from {{ ref('gender') }}\n\n),\n\ndeaths_from_claims as (\n\n    select distinct patient_id\n    from {{ ref('base_medical_claim') }}\n    where discharge_disposition_code  = '20'\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from eligibility\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_patient_id as (\n\n    select distinct patient_id\n    from (\n        select\n              patient_id\n            , member_id\n            , enrollment_start_date\n            , enrollment_end_date\n            , payer\n            , payer_type\n        from eligibility\n        group by\n              patient_id\n            , member_id\n            , enrollment_start_date\n            , enrollment_end_date\n            , payer\n            , payer_type\n        having count(*) > 1\n    )\n\n),\n\njoined as (\n\n    select\n          eligibility.patient_id\n        , eligibility.member_id\n        , eligibility.enrollment_start_date\n        , eligibility.enrollment_end_date\n        , eligibility.payer\n        , eligibility.payer_type\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_eligibility_record\n        , case\n            when duplicate_patient_id.patient_id is null then 0\n            else 1\n          end as duplicate_patient_id\n        , {{ missing_field_check('eligibility.patient_id') }} as missing_eligibility_patient_id\n        , {{ missing_field_check('eligibility.member_id') }} as missing_eligibility_member_id\n        , {{ missing_field_check('eligibility.enrollment_start_date') }} as missing_enrollment_start_date\n        , {{ valid_claim_date_check('eligibility.enrollment_start_date') }} as invalid_enrollment_start_date\n        , {{ missing_field_check('eligibility.enrollment_end_date') }} as missing_enrollment_end_date\n        , {{ valid_claim_date_check('eligibility.enrollment_end_date') }} as invalid_enrollment_end_date\n        , case\n            when eligibility.enrollment_end_date is null then 0\n            when eligibility.enrollment_end_date is not null\n              and eligibility.enrollment_end_date > eligibility.enrollment_start_date\n              then 0\n            else 1\n          end as invalid_enrollment_end_before_start\n        , {{ missing_field_check('eligibility.birth_date') }} as missing_birth_date\n        , {{ valid_birth_or_death_date_check('eligibility.birth_date') }} as invalid_birth_date\n        , case\n            when eligibility.death_date is null\n              and eligibility.death_flag is not null\n              then 1\n            when eligibility.death_date is null\n              and deaths_from_claims.patient_id is not null\n              then 1\n            else 0\n          end as missing_death_date\n        , {{ valid_birth_or_death_date_check('eligibility.death_date') }} as invalid_death_date\n        , case\n            when eligibility.death_date is null then 0\n            when eligibility.death_date is not null\n              and eligibility.death_date > eligibility.birth_date\n              then 0\n            else 1\n          end as invalid_death_before_birth\n        , {{ missing_field_check('eligibility.gender') }} as missing_gender\n        , case\n            when eligibility.gender is null then 0\n            when seed_gender.description is not null then 0\n            else 1\n          end as invalid_gender\n    from eligibility\n         left join duplicate_record\n            on eligibility.row_hash = duplicate_record.row_hash\n         left join duplicate_patient_id\n            on eligibility.patient_id = duplicate_patient_id.patient_id\n         left join seed_gender\n            on eligibility.gender = seed_gender.description\n         left join deaths_from_claims\n            on eligibility.patient_id = deaths_from_claims.patient_id\n\n)\n\n/* casting fields used as unique key in snapshot */\nselect\n      {{ cast_string_or_varchar('patient_id') }} as patient_id\n    , {{ cast_string_or_varchar('member_id') }} as member_id\n    , {{ cast_string_or_varchar('enrollment_start_date') }} as enrollment_start_date\n    , {{ cast_string_or_varchar('enrollment_end_date') }} as enrollment_end_date\n    , {{ cast_string_or_varchar('payer') }} as payer\n    , {{ cast_string_or_varchar('payer_type') }} as payer_type\n    , duplicate_eligibility_record\n    , duplicate_patient_id\n    , missing_eligibility_patient_id\n    , missing_eligibility_member_id\n    , missing_enrollment_start_date\n    , invalid_enrollment_start_date\n    , missing_enrollment_end_date\n    , invalid_enrollment_end_date\n    , invalid_enrollment_end_before_start\n    , missing_birth_date\n    , invalid_birth_date\n    , missing_death_date\n    , invalid_death_date\n    , invalid_death_before_birth\n    , missing_gender\n    , invalid_gender\n    , {{ current_date_or_timestamp('timestamp') }} as run_date\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.data_profiling.missing_field_check", "macro.data_profiling.valid_claim_date_check", "macro.data_profiling.valid_birth_or_death_date_check", "macro.data_profiling.cast_string_or_varchar", "macro.data_profiling.current_date_or_timestamp"], "nodes": ["model.data_profiling.base_eligibility", "seed.data_profiling.gender", "model.data_profiling.base_medical_claim"]}, "config": {"enabled": true, "alias": null, "schema": "data_profiling", "database": "tuva", "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "claims_input_layer", "eligibility_detail"], "unique_id": "model.data_profiling.eligibility_detail", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "claims_input_layer/eligibility_detail.sql", "original_file_path": "models/claims_input_layer/eligibility_detail.sql", "name": "eligibility_detail", "alias": "eligibility_detail", "checksum": {"name": "sha256", "checksum": "fddb7a23c9c2b0fdbebd8fe79f210610242067656e7e4d130d9a84f3fd1e9d49"}, "tags": [], "refs": [["base_eligibility"], ["gender"], ["base_medical_claim"]], "sources": [], "description": "Data profiling on eligibility source data with columns for source  primary keys and every data quality check performed.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enrollment_start_date": {"name": "enrollment_start_date", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enrollment_end_date": {"name": "enrollment_end_date", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer_type": {"name": "payer_type", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_eligibility_record": {"name": "duplicate_eligibility_record", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_patient_id": {"name": "duplicate_patient_id", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_eligibility_patient_id": {"name": "missing_eligibility_patient_id", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_eligibility_member_id": {"name": "missing_eligibility_member_id", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_enrollment_start_date": {"name": "missing_enrollment_start_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_enrollment_start_date": {"name": "invalid_enrollment_start_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_enrollment_end_date": {"name": "missing_enrollment_end_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_enrollment_end_date": {"name": "invalid_enrollment_end_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_enrollment_end_before_start": {"name": "invalid_enrollment_end_before_start", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_birth_date": {"name": "missing_birth_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_birth_date": {"name": "invalid_birth_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_death_date": {"name": "missing_death_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_death_date": {"name": "invalid_death_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_death_before_birth": {"name": "invalid_death_before_birth", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_gender": {"name": "missing_gender", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_gender": {"name": "invalid_gender", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_date": {"name": "run_date", "description": "Datetime the model was run used for snapshots", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://models/claims_input_layer/config/eligibility_detail.yml", "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/eligibility_detail.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.536258, "compiled_sql": "with eligibility as (\n\n    select * from tuva.data_profiling.base_eligibility\n\n),\n\nseed_gender as (\n\n    select * from tuva.terminology.gender\n\n),\n\ndeaths_from_claims as (\n\n    select distinct patient_id\n    from tuva.data_profiling.base_medical_claim\n    where discharge_disposition_code  = '20'\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from eligibility\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_patient_id as (\n\n    select distinct patient_id\n    from (\n        select\n              patient_id\n            , member_id\n            , enrollment_start_date\n            , enrollment_end_date\n            , payer\n            , payer_type\n        from eligibility\n        group by\n              patient_id\n            , member_id\n            , enrollment_start_date\n            , enrollment_end_date\n            , payer\n            , payer_type\n        having count(*) > 1\n    )\n\n),\n\njoined as (\n\n    select\n          eligibility.patient_id\n        , eligibility.member_id\n        , eligibility.enrollment_start_date\n        , eligibility.enrollment_end_date\n        , eligibility.payer\n        , eligibility.payer_type\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_eligibility_record\n        , case\n            when duplicate_patient_id.patient_id is null then 0\n            else 1\n          end as duplicate_patient_id\n        , \n\n    case\n      when eligibility.patient_id is null or cast(eligibility.patient_id as string) = '' then 1\n      else 0\n    end as missing_eligibility_patient_id\n        , \n\n    case\n      when eligibility.member_id is null or cast(eligibility.member_id as string) = '' then 1\n      else 0\n    end as missing_eligibility_member_id\n        , \n\n    case\n      when eligibility.enrollment_start_date is null or cast(eligibility.enrollment_start_date as string) = '' then 1\n      else 0\n    end as missing_enrollment_start_date\n        , case\n      when eligibility.enrollment_start_date is null then 0\n      when try_cast(eligibility.enrollment_start_date as date) is not null\n        and try_cast(eligibility.enrollment_start_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_enrollment_start_date\n        , \n\n    case\n      when eligibility.enrollment_end_date is null or cast(eligibility.enrollment_end_date as string) = '' then 1\n      else 0\n    end as missing_enrollment_end_date\n        , case\n      when eligibility.enrollment_end_date is null then 0\n      when try_cast(eligibility.enrollment_end_date as date) is not null\n        and try_cast(eligibility.enrollment_end_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_enrollment_end_date\n        , case\n            when eligibility.enrollment_end_date is null then 0\n            when eligibility.enrollment_end_date is not null\n              and eligibility.enrollment_end_date > eligibility.enrollment_start_date\n              then 0\n            else 1\n          end as invalid_enrollment_end_before_start\n        , \n\n    case\n      when eligibility.birth_date is null or cast(eligibility.birth_date as string) = '' then 1\n      else 0\n    end as missing_birth_date\n        , case\n      when eligibility.birth_date is null then 0\n      when try_cast(eligibility.birth_date as date) is not null\n        and try_cast(eligibility.birth_date as date) between '1900-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_birth_date\n        , case\n            when eligibility.death_date is null\n              and eligibility.death_flag is not null\n              then 1\n            when eligibility.death_date is null\n              and deaths_from_claims.patient_id is not null\n              then 1\n            else 0\n          end as missing_death_date\n        , case\n      when eligibility.death_date is null then 0\n      when try_cast(eligibility.death_date as date) is not null\n        and try_cast(eligibility.death_date as date) between '1900-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_death_date\n        , case\n            when eligibility.death_date is null then 0\n            when eligibility.death_date is not null\n              and eligibility.death_date > eligibility.birth_date\n              then 0\n            else 1\n          end as invalid_death_before_birth\n        , \n\n    case\n      when eligibility.gender is null or cast(eligibility.gender as string) = '' then 1\n      else 0\n    end as missing_gender\n        , case\n            when eligibility.gender is null then 0\n            when seed_gender.description is not null then 0\n            else 1\n          end as invalid_gender\n    from eligibility\n         left join duplicate_record\n            on eligibility.row_hash = duplicate_record.row_hash\n         left join duplicate_patient_id\n            on eligibility.patient_id = duplicate_patient_id.patient_id\n         left join seed_gender\n            on eligibility.gender = seed_gender.description\n         left join deaths_from_claims\n            on eligibility.patient_id = deaths_from_claims.patient_id\n\n)\n\n/* casting fields used as unique key in snapshot */\nselect\n      \n\n    cast( patient_id as string ) as patient_id\n    , \n\n    cast( member_id as string ) as member_id\n    , \n\n    cast( enrollment_start_date as string ) as enrollment_start_date\n    , \n\n    cast( enrollment_end_date as string ) as enrollment_end_date\n    , \n\n    cast( payer as string ) as payer\n    , \n\n    cast( payer_type as string ) as payer_type\n    , duplicate_eligibility_record\n    , duplicate_patient_id\n    , missing_eligibility_patient_id\n    , missing_eligibility_member_id\n    , missing_enrollment_start_date\n    , invalid_enrollment_start_date\n    , missing_enrollment_end_date\n    , invalid_enrollment_end_date\n    , invalid_enrollment_end_before_start\n    , missing_birth_date\n    , invalid_birth_date\n    , missing_death_date\n    , invalid_death_date\n    , invalid_death_before_birth\n    , missing_gender\n    , invalid_gender\n    , \n\n    cast(current_timestamp() as timestamp) as run_date\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.eligibility_detail"}, "model.data_profiling.medical_claim_detail": {"raw_sql": "with medical_claim as (\n\n    select * from {{ ref('base_medical_claim') }}\n\n),\n\nseed_bill_type as (\n\n    select * from {{ ref('bill_type') }}\n\n),\n\nseed_claim_type as (\n\n    select * from {{ ref('claim_type') }}\n\n),\n\nseed_discharge_disposition as (\n\n    select * from {{ ref('discharge_disposition') }}\n\n),\n\nseed_icd_10_cm as (\n\n    select * from {{ ref('icd_10_cm') }}\n\n),\n\nseed_ms_drg as (\n\n    select * from {{ ref('ms_drg') }}\n\n),\n\nseed_place_of_service as (\n\n    select * from {{ ref('place_of_service') }}\n\n),\n\nseed_present_on_admission as (\n\n    select * from {{ ref('present_on_admission') }}\n\n),\n\nseed_revenue_center as (\n\n    select * from {{ ref('revenue_center_code') }}\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from medical_claim\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_claim_id as (\n\n    select distinct claim_id\n    from (\n        select\n              claim_id\n            , claim_line_number\n        from medical_claim\n        group by\n              claim_id\n            , claim_line_number\n        having count (*) > 1\n    )\n\n),\n\nmissing_fk_patient_id as (\n\n    select distinct medical_claim.row_hash\n    from medical_claim\n         left join {{ ref('base_eligibility') }} as eligibility\n         on medical_claim.patient_id = eligibility.patient_id\n    where eligibility.patient_id is null\n\n),\n\njoined as (\n\n    select\n          medical_claim.claim_id\n        , medical_claim.claim_line_number\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_med_claim_record\n        , case\n            when duplicate_claim_id.claim_id is null then 0\n            else 1\n          end as duplicate_med_claim_id\n        , {{ missing_field_check('medical_claim.patient_id') }} as missing_med_claim_patient_id\n        , case\n            when missing_fk_patient_id.row_hash is null then 0\n            else 1\n          end as missing_med_claim_patient_id_fk\n        , {{ missing_field_check('medical_claim.claim_id') }} as missing_med_claim_id\n        , {{ missing_field_check('medical_claim.claim_line_number') }} as missing_med_claim_line_number\n        , {{ missing_field_check('medical_claim.claim_type') }} as missing_claim_type\n        , case\n            when medical_claim.claim_type is null then 0\n            when seed_claim_type.description is not null then 0\n            else 1\n          end as invalid_claim_type\n        , {{ missing_field_check('medical_claim.claim_start_date') }} as missing_claim_start_date\n        , {{ valid_claim_date_check('medical_claim.claim_start_date') }} as invalid_claim_start_date\n        , {{ missing_field_check('medical_claim.claim_end_date') }} as missing_claim_end_date\n        , {{ valid_claim_date_check('medical_claim.claim_end_date') }} as invalid_claim_end_date\n        , case\n            when medical_claim.claim_end_date is null then 0\n            when medical_claim.claim_end_date is not null\n              and medical_claim.claim_end_date >= medical_claim.claim_start_date\n              then 0\n            else 1\n          end as invalid_claim_end_before_start\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.admission_date') }}\n            else 0\n          end as missing_admission_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ valid_claim_date_check('medical_claim.admission_date') }}\n            else 0\n          end as invalid_admission_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.discharge_date') }}\n            else 0\n          end as missing_discharge_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ valid_claim_date_check('medical_claim.discharge_date') }}\n            else 0\n          end as invalid_discharge_date\n        , case\n            when medical_claim.discharge_date is null then 0\n            when medical_claim.discharge_date is not null\n              and medical_claim.discharge_date >= medical_claim.admission_date\n              then 0\n            else 1\n          end as invalid_discharge_before_admission\n        , {{ missing_field_check('medical_claim.paid_date') }} as missing_med_claim_paid_date\n        , {{ valid_claim_date_check('medical_claim.paid_date') }} as invalid_med_claim_paid_date\n        , {{ missing_field_check('medical_claim.paid_amount') }} as missing_med_claim_paid_amount\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.bill_type_code') }}\n            else 0\n          end as missing_bill_type_code\n        , case\n            when medical_claim.bill_type_code is null then 0\n            when seed_bill_type.code is not null then 0\n            else 1\n          end as invalid_bill_type_code\n        , case\n            when medical_claim.claim_type = 'professional'\n            then {{ missing_field_check('medical_claim.place_of_service_code') }}\n            else 0\n          end as missing_place_of_service_code\n        , case\n            when medical_claim.place_of_service_code is null then 0\n            when seed_place_of_service.place_of_service_code is not null then 0\n            else 1\n          end invalid_place_of_service_code\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.revenue_center_code') }}\n            else 0\n          end as missing_revenue_center_code\n        , case\n            when medical_claim.revenue_center_code is null then 0\n            when seed_revenue_center.revenue_center_code is not null then 0\n            else 1\n          end invalid_revenue_center_code\n        , {{ missing_field_check('medical_claim.diagnosis_code_1') }} as missing_diagnosis_code_1\n        , case\n            when medical_claim.diagnosis_code_1 is null then 0\n            when seed_icd_10_cm.icd_10_cm is not null then 0\n            else 1\n          end invalid_diagnosis_code_1\n       , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.diagnosis_poa_1') }}\n            else 0\n          end as missing_diagnosis_poa_1\n       , case\n            when medical_claim.diagnosis_poa_1 is null then 0\n            when seed_present_on_admission.present_on_admit_code is not null then 0\n            else 1\n          end invalid_diagnosis_poa_1\n        , case\n            when medical_claim.claim_type = 'professional'\n            then {{ missing_field_check('medical_claim.hcpcs_code') }}\n            else 0\n          end as missing_hcpcs_code\n        , case\n            when medical_claim.discharge_disposition_code is null then 0\n            when seed_discharge_disposition.discharge_disposition_code is not null then 0\n            else 1\n          end invalid_discharge_disposition_code\n        , case\n            when medical_claim.ms_drg is null then 0\n            when seed_ms_drg.code is not null then 0\n            else 1\n          end invalid_ms_drg\n        , case\n            when medical_claim.claim_type = 'professional'\n            then {{ missing_field_check('medical_claim.billing_npi') }}\n            else 0\n          end as missing_billing_npi\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.facility_npi') }}\n            else 0\n          end as missing_facility_npi\n        , {{ missing_field_check('medical_claim.rendering_npi') }} as missing_rendering_npi\n    from medical_claim\n         left join duplicate_record\n            on medical_claim.row_hash = duplicate_record.row_hash\n         left join duplicate_claim_id\n            on medical_claim.claim_id = duplicate_claim_id.claim_id\n         left join missing_fk_patient_id\n            on medical_claim.row_hash = missing_fk_patient_id.row_hash\n         left join seed_bill_type\n            on medical_claim.bill_type_code = seed_bill_type.code\n         left join seed_claim_type\n            on medical_claim.claim_type = seed_claim_type.description\n         left join seed_discharge_disposition\n            on medical_claim.discharge_disposition_code = seed_discharge_disposition.discharge_disposition_code\n         left join seed_icd_10_cm\n            on medical_claim.diagnosis_code_1 = seed_icd_10_cm.icd_10_cm\n         left join seed_ms_drg\n            on medical_claim.ms_drg = seed_ms_drg.code\n         left join seed_place_of_service\n            on medical_claim.place_of_service_code = seed_place_of_service.place_of_service_code\n         left join seed_present_on_admission\n            on medical_claim.diagnosis_poa_1 = seed_present_on_admission.present_on_admit_code\n         left join seed_revenue_center\n            on medical_claim.revenue_center_code = seed_revenue_center.revenue_center_code\n\n)\n\n/* casting fields used as unique key in snapshot */\nselect\n      {{ cast_string_or_varchar('claim_id') }} as claim_id\n    , {{ cast_string_or_varchar('claim_line_number') }} as claim_line_number\n    , duplicate_med_claim_record\n    , duplicate_med_claim_id\n    , missing_med_claim_patient_id\n    , missing_med_claim_patient_id_fk\n    , missing_med_claim_id\n    , missing_med_claim_line_number\n    , missing_claim_type\n    , invalid_claim_type\n    , missing_claim_start_date\n    , invalid_claim_start_date\n    , missing_claim_end_date\n    , invalid_claim_end_date\n    , invalid_claim_end_before_start\n    , missing_admission_date\n    , invalid_admission_date\n    , missing_discharge_date\n    , invalid_discharge_date\n    , invalid_discharge_before_admission\n    , missing_med_claim_paid_date\n    , invalid_med_claim_paid_date\n    , missing_med_claim_paid_amount\n    , missing_bill_type_code\n    , invalid_bill_type_code\n    , missing_place_of_service_code\n    , invalid_place_of_service_code\n    , missing_revenue_center_code\n    , invalid_revenue_center_code\n    , missing_diagnosis_code_1\n    , invalid_diagnosis_code_1\n    , missing_diagnosis_poa_1\n    , invalid_diagnosis_poa_1\n    , missing_hcpcs_code\n    , invalid_discharge_disposition_code\n    , invalid_ms_drg\n    , missing_billing_npi\n    , missing_facility_npi\n    , missing_rendering_npi\n    , {{ current_date_or_timestamp('timestamp') }} as run_date\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.data_profiling.missing_field_check", "macro.data_profiling.valid_claim_date_check", "macro.data_profiling.cast_string_or_varchar", "macro.data_profiling.current_date_or_timestamp"], "nodes": ["model.data_profiling.base_medical_claim", "seed.data_profiling.bill_type", "seed.data_profiling.claim_type", "seed.data_profiling.discharge_disposition", "seed.data_profiling.icd_10_cm", "seed.data_profiling.ms_drg", "seed.data_profiling.place_of_service", "seed.data_profiling.present_on_admission", "seed.data_profiling.revenue_center_code", "model.data_profiling.base_eligibility"]}, "config": {"enabled": true, "alias": null, "schema": "data_profiling", "database": "tuva", "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "claims_input_layer", "medical_claim_detail"], "unique_id": "model.data_profiling.medical_claim_detail", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "claims_input_layer/medical_claim_detail.sql", "original_file_path": "models/claims_input_layer/medical_claim_detail.sql", "name": "medical_claim_detail", "alias": "medical_claim_detail", "checksum": {"name": "sha256", "checksum": "ade17ba5ffacb604ecf90b20076973fec48c8f7008f435dbcd67cf6361574d4f"}, "tags": [], "refs": [["base_medical_claim"], ["bill_type"], ["claim_type"], ["discharge_disposition"], ["icd_10_cm"], ["ms_drg"], ["place_of_service"], ["present_on_admission"], ["revenue_center_code"], ["base_eligibility"]], "sources": [], "description": "Data profiling on medical claim line source data with columns for  source primary keys and every data quality check performed.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_med_claim_record": {"name": "duplicate_med_claim_record", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_med_claim_id": {"name": "duplicate_med_claim_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_patient_id": {"name": "missing_med_claim_patient_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_patient_id_fk": {"name": "missing_med_claim_patient_id_fk", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_id": {"name": "missing_med_claim_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_line_number": {"name": "missing_med_claim_line_number", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_claim_type": {"name": "missing_claim_type", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_claim_type": {"name": "invalid_claim_type", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_claim_start_date": {"name": "missing_claim_start_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_claim_start_date": {"name": "invalid_claim_start_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_claim_end_date": {"name": "missing_claim_end_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_claim_end_date": {"name": "invalid_claim_end_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_claim_end_before_start": {"name": "invalid_claim_end_before_start", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_admission_date": {"name": "missing_admission_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_admission_date": {"name": "invalid_admission_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_date": {"name": "missing_discharge_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_date": {"name": "invalid_discharge_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_before_admission": {"name": "invalid_discharge_before_admission", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_paid_date": {"name": "missing_med_claim_paid_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_med_claim_paid_date": {"name": "invalid_med_claim_paid_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_paid_amount": {"name": "missing_med_claim_paid_amount", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_bill_type_code": {"name": "missing_bill_type_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_bill_type_code": {"name": "invalid_bill_type_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_place_of_service_code": {"name": "missing_place_of_service_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_place_of_service_code": {"name": "invalid_place_of_service_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_revenue_center_code": {"name": "missing_revenue_center_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_revenue_center_code": {"name": "invalid_revenue_center_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_diagnosis_code_1": {"name": "missing_diagnosis_code_1", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_diagnosis_code_1": {"name": "invalid_diagnosis_code_1", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_diagnosis_poa_1": {"name": "missing_diagnosis_poa_1", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_diagnosis_poa_1": {"name": "invalid_diagnosis_poa_1", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_hcpcs_code": {"name": "missing_hcpcs_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_disposition_code": {"name": "invalid_discharge_disposition_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_ms_drg": {"name": "invalid_ms_drg", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_billing_npi": {"name": "missing_billing_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_facility_npi": {"name": "missing_facility_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_rendering_npi": {"name": "missing_rendering_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_date": {"name": "run_date", "description": "Datetime the model was run used for snapshots", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://models/claims_input_layer/config/medical_claim_detail.yml", "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/medical_claim_detail.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.5598662, "compiled_sql": "with medical_claim as (\n\n    select * from tuva.data_profiling.base_medical_claim\n\n),\n\nseed_bill_type as (\n\n    select * from tuva.terminology.bill_type\n\n),\n\nseed_claim_type as (\n\n    select * from tuva.terminology.claim_type\n\n),\n\nseed_discharge_disposition as (\n\n    select * from tuva.terminology.discharge_disposition\n\n),\n\nseed_icd_10_cm as (\n\n    select * from tuva.terminology.icd_10_cm\n\n),\n\nseed_ms_drg as (\n\n    select * from tuva.terminology.ms_drg\n\n),\n\nseed_place_of_service as (\n\n    select * from tuva.terminology.place_of_service\n\n),\n\nseed_present_on_admission as (\n\n    select * from tuva.terminology.present_on_admission\n\n),\n\nseed_revenue_center as (\n\n    select * from tuva.terminology.revenue_center_code\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from medical_claim\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_claim_id as (\n\n    select distinct claim_id\n    from (\n        select\n              claim_id\n            , claim_line_number\n        from medical_claim\n        group by\n              claim_id\n            , claim_line_number\n        having count (*) > 1\n    )\n\n),\n\nmissing_fk_patient_id as (\n\n    select distinct medical_claim.row_hash\n    from medical_claim\n         left join tuva.data_profiling.base_eligibility as eligibility\n         on medical_claim.patient_id = eligibility.patient_id\n    where eligibility.patient_id is null\n\n),\n\njoined as (\n\n    select\n          medical_claim.claim_id\n        , medical_claim.claim_line_number\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_med_claim_record\n        , case\n            when duplicate_claim_id.claim_id is null then 0\n            else 1\n          end as duplicate_med_claim_id\n        , \n\n    case\n      when medical_claim.patient_id is null or cast(medical_claim.patient_id as string) = '' then 1\n      else 0\n    end as missing_med_claim_patient_id\n        , case\n            when missing_fk_patient_id.row_hash is null then 0\n            else 1\n          end as missing_med_claim_patient_id_fk\n        , \n\n    case\n      when medical_claim.claim_id is null or cast(medical_claim.claim_id as string) = '' then 1\n      else 0\n    end as missing_med_claim_id\n        , \n\n    case\n      when medical_claim.claim_line_number is null or cast(medical_claim.claim_line_number as string) = '' then 1\n      else 0\n    end as missing_med_claim_line_number\n        , \n\n    case\n      when medical_claim.claim_type is null or cast(medical_claim.claim_type as string) = '' then 1\n      else 0\n    end as missing_claim_type\n        , case\n            when medical_claim.claim_type is null then 0\n            when seed_claim_type.description is not null then 0\n            else 1\n          end as invalid_claim_type\n        , \n\n    case\n      when medical_claim.claim_start_date is null or cast(medical_claim.claim_start_date as string) = '' then 1\n      else 0\n    end as missing_claim_start_date\n        , case\n      when medical_claim.claim_start_date is null then 0\n      when try_cast(medical_claim.claim_start_date as date) is not null\n        and try_cast(medical_claim.claim_start_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_claim_start_date\n        , \n\n    case\n      when medical_claim.claim_end_date is null or cast(medical_claim.claim_end_date as string) = '' then 1\n      else 0\n    end as missing_claim_end_date\n        , case\n      when medical_claim.claim_end_date is null then 0\n      when try_cast(medical_claim.claim_end_date as date) is not null\n        and try_cast(medical_claim.claim_end_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_claim_end_date\n        , case\n            when medical_claim.claim_end_date is null then 0\n            when medical_claim.claim_end_date is not null\n              and medical_claim.claim_end_date >= medical_claim.claim_start_date\n              then 0\n            else 1\n          end as invalid_claim_end_before_start\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.admission_date is null or cast(medical_claim.admission_date as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_admission_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then case\n      when medical_claim.admission_date is null then 0\n      when try_cast(medical_claim.admission_date as date) is not null\n        and try_cast(medical_claim.admission_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end\n            else 0\n          end as invalid_admission_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.discharge_date is null or cast(medical_claim.discharge_date as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_discharge_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then case\n      when medical_claim.discharge_date is null then 0\n      when try_cast(medical_claim.discharge_date as date) is not null\n        and try_cast(medical_claim.discharge_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end\n            else 0\n          end as invalid_discharge_date\n        , case\n            when medical_claim.discharge_date is null then 0\n            when medical_claim.discharge_date is not null\n              and medical_claim.discharge_date >= medical_claim.admission_date\n              then 0\n            else 1\n          end as invalid_discharge_before_admission\n        , \n\n    case\n      when medical_claim.paid_date is null or cast(medical_claim.paid_date as string) = '' then 1\n      else 0\n    end as missing_med_claim_paid_date\n        , case\n      when medical_claim.paid_date is null then 0\n      when try_cast(medical_claim.paid_date as date) is not null\n        and try_cast(medical_claim.paid_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_med_claim_paid_date\n        , \n\n    case\n      when medical_claim.paid_amount is null or cast(medical_claim.paid_amount as string) = '' then 1\n      else 0\n    end as missing_med_claim_paid_amount\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.bill_type_code is null or cast(medical_claim.bill_type_code as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_bill_type_code\n        , case\n            when medical_claim.bill_type_code is null then 0\n            when seed_bill_type.code is not null then 0\n            else 1\n          end as invalid_bill_type_code\n        , case\n            when medical_claim.claim_type = 'professional'\n            then \n\n    case\n      when medical_claim.place_of_service_code is null or cast(medical_claim.place_of_service_code as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_place_of_service_code\n        , case\n            when medical_claim.place_of_service_code is null then 0\n            when seed_place_of_service.place_of_service_code is not null then 0\n            else 1\n          end invalid_place_of_service_code\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.revenue_center_code is null or cast(medical_claim.revenue_center_code as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_revenue_center_code\n        , case\n            when medical_claim.revenue_center_code is null then 0\n            when seed_revenue_center.revenue_center_code is not null then 0\n            else 1\n          end invalid_revenue_center_code\n        , \n\n    case\n      when medical_claim.diagnosis_code_1 is null or cast(medical_claim.diagnosis_code_1 as string) = '' then 1\n      else 0\n    end as missing_diagnosis_code_1\n        , case\n            when medical_claim.diagnosis_code_1 is null then 0\n            when seed_icd_10_cm.icd_10_cm is not null then 0\n            else 1\n          end invalid_diagnosis_code_1\n       , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.diagnosis_poa_1 is null or cast(medical_claim.diagnosis_poa_1 as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_diagnosis_poa_1\n       , case\n            when medical_claim.diagnosis_poa_1 is null then 0\n            when seed_present_on_admission.present_on_admit_code is not null then 0\n            else 1\n          end invalid_diagnosis_poa_1\n        , case\n            when medical_claim.claim_type = 'professional'\n            then \n\n    case\n      when medical_claim.hcpcs_code is null or cast(medical_claim.hcpcs_code as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_hcpcs_code\n        , case\n            when medical_claim.discharge_disposition_code is null then 0\n            when seed_discharge_disposition.discharge_disposition_code is not null then 0\n            else 1\n          end invalid_discharge_disposition_code\n        , case\n            when medical_claim.ms_drg is null then 0\n            when seed_ms_drg.code is not null then 0\n            else 1\n          end invalid_ms_drg\n        , case\n            when medical_claim.claim_type = 'professional'\n            then \n\n    case\n      when medical_claim.billing_npi is null or cast(medical_claim.billing_npi as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_billing_npi\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.facility_npi is null or cast(medical_claim.facility_npi as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_facility_npi\n        , \n\n    case\n      when medical_claim.rendering_npi is null or cast(medical_claim.rendering_npi as string) = '' then 1\n      else 0\n    end as missing_rendering_npi\n    from medical_claim\n         left join duplicate_record\n            on medical_claim.row_hash = duplicate_record.row_hash\n         left join duplicate_claim_id\n            on medical_claim.claim_id = duplicate_claim_id.claim_id\n         left join missing_fk_patient_id\n            on medical_claim.row_hash = missing_fk_patient_id.row_hash\n         left join seed_bill_type\n            on medical_claim.bill_type_code = seed_bill_type.code\n         left join seed_claim_type\n            on medical_claim.claim_type = seed_claim_type.description\n         left join seed_discharge_disposition\n            on medical_claim.discharge_disposition_code = seed_discharge_disposition.discharge_disposition_code\n         left join seed_icd_10_cm\n            on medical_claim.diagnosis_code_1 = seed_icd_10_cm.icd_10_cm\n         left join seed_ms_drg\n            on medical_claim.ms_drg = seed_ms_drg.code\n         left join seed_place_of_service\n            on medical_claim.place_of_service_code = seed_place_of_service.place_of_service_code\n         left join seed_present_on_admission\n            on medical_claim.diagnosis_poa_1 = seed_present_on_admission.present_on_admit_code\n         left join seed_revenue_center\n            on medical_claim.revenue_center_code = seed_revenue_center.revenue_center_code\n\n)\n\n/* casting fields used as unique key in snapshot */\nselect\n      \n\n    cast( claim_id as string ) as claim_id\n    , \n\n    cast( claim_line_number as string ) as claim_line_number\n    , duplicate_med_claim_record\n    , duplicate_med_claim_id\n    , missing_med_claim_patient_id\n    , missing_med_claim_patient_id_fk\n    , missing_med_claim_id\n    , missing_med_claim_line_number\n    , missing_claim_type\n    , invalid_claim_type\n    , missing_claim_start_date\n    , invalid_claim_start_date\n    , missing_claim_end_date\n    , invalid_claim_end_date\n    , invalid_claim_end_before_start\n    , missing_admission_date\n    , invalid_admission_date\n    , missing_discharge_date\n    , invalid_discharge_date\n    , invalid_discharge_before_admission\n    , missing_med_claim_paid_date\n    , invalid_med_claim_paid_date\n    , missing_med_claim_paid_amount\n    , missing_bill_type_code\n    , invalid_bill_type_code\n    , missing_place_of_service_code\n    , invalid_place_of_service_code\n    , missing_revenue_center_code\n    , invalid_revenue_center_code\n    , missing_diagnosis_code_1\n    , invalid_diagnosis_code_1\n    , missing_diagnosis_poa_1\n    , invalid_diagnosis_poa_1\n    , missing_hcpcs_code\n    , invalid_discharge_disposition_code\n    , invalid_ms_drg\n    , missing_billing_npi\n    , missing_facility_npi\n    , missing_rendering_npi\n    , \n\n    cast(current_timestamp() as timestamp) as run_date\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.medical_claim_detail"}, "model.data_profiling.pharmacy_claim_detail": {"raw_sql": "with pharmacy_claim as (\n\n    select * from {{ ref('base_pharmacy_claim') }}\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from pharmacy_claim\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_claim_id as (\n\n    select distinct claim_id\n    from (\n        select\n              claim_id\n            , claim_line_number\n        from pharmacy_claim\n        group by\n              claim_id\n            , claim_line_number\n        having count (*) > 1\n    )\n\n),\n\nmissing_fk_patient_id as (\n\n    select distinct pharmacy_claim.row_hash\n    from pharmacy_claim\n         left join {{ ref('base_eligibility') }} as eligibility\n         on pharmacy_claim.patient_id = eligibility.patient_id\n    where eligibility.patient_id is null\n\n),\n\njoined as (\n\n    select\n          pharmacy_claim.claim_id\n        , pharmacy_claim.claim_line_number\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_pharm_claim_record\n        , case\n            when duplicate_claim_id.claim_id is null then 0\n            else 1\n          end as duplicate_pharm_claim_id\n        , {{ missing_field_check('pharmacy_claim.patient_id') }} as missing_pharm_claim_patient_id\n        , case\n            when missing_fk_patient_id.row_hash is null then 0\n            else 1\n          end as missing_pharm_claim_patient_id_fk\n        , {{ missing_field_check('pharmacy_claim.claim_id') }} as missing_pharm_claim_id\n        , {{ missing_field_check('pharmacy_claim.claim_line_number') }} as missing_pharm_claim_line_number\n        , {{ missing_field_check('pharmacy_claim.dispensing_date') }} as missing_dispensing_date\n        , {{ valid_claim_date_check('pharmacy_claim.dispensing_date') }} as invalid_dispensing_date\n        , {{ missing_field_check('pharmacy_claim.paid_date') }} as missing_pharm_claim_paid_date\n        , {{ valid_claim_date_check('pharmacy_claim.paid_date') }} as invalid_pharm_claim_paid_date\n        , {{ missing_field_check('pharmacy_claim.paid_amount') }} as missing_pharm_claim_paid_amount\n        , {{ missing_field_check('pharmacy_claim.prescribing_provider_npi') }} as missing_prescribing_provider_npi\n        , {{ missing_field_check('pharmacy_claim.dispensing_provider_npi') }} as missing_dispensing_provider_npi\n        , {{ missing_field_check('pharmacy_claim.ndc') }} as missing_ndc\n    from pharmacy_claim\n         left join duplicate_record\n            on pharmacy_claim.row_hash = duplicate_record.row_hash\n         left join duplicate_claim_id\n            on pharmacy_claim.claim_id = duplicate_claim_id.claim_id\n         left join missing_fk_patient_id\n            on pharmacy_claim.row_hash = missing_fk_patient_id.row_hash\n\n)\n\nselect\n      {{ cast_string_or_varchar('claim_id') }} as claim_id\n    , {{ cast_string_or_varchar('claim_line_number') }} as claim_line_number\n    , duplicate_pharm_claim_record\n    , duplicate_pharm_claim_id\n    , missing_pharm_claim_patient_id\n    , missing_pharm_claim_patient_id_fk\n    , missing_pharm_claim_id\n    , missing_pharm_claim_line_number\n    , missing_dispensing_date\n    , invalid_dispensing_date\n    , missing_pharm_claim_paid_date\n    , invalid_pharm_claim_paid_date\n    , missing_pharm_claim_paid_amount\n    , missing_prescribing_provider_npi\n    , missing_dispensing_provider_npi\n    , missing_ndc\n    , {{ current_date_or_timestamp('timestamp') }} as run_date\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.data_profiling.missing_field_check", "macro.data_profiling.valid_claim_date_check", "macro.data_profiling.cast_string_or_varchar", "macro.data_profiling.current_date_or_timestamp"], "nodes": ["model.data_profiling.base_pharmacy_claim", "model.data_profiling.base_eligibility"]}, "config": {"enabled": true, "alias": null, "schema": "data_profiling", "database": "tuva", "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "claims_input_layer", "pharmacy_claim_detail"], "unique_id": "model.data_profiling.pharmacy_claim_detail", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "claims_input_layer/pharmacy_claim_detail.sql", "original_file_path": "models/claims_input_layer/pharmacy_claim_detail.sql", "name": "pharmacy_claim_detail", "alias": "pharmacy_claim_detail", "checksum": {"name": "sha256", "checksum": "78104acf3ad901fba249df0aebf8c46ac5e39c0e713a50e82d0c068f4bb2e368"}, "tags": [], "refs": [["base_pharmacy_claim"], ["base_eligibility"]], "sources": [], "description": "Data profiling on pharmacy claim line source data with columns for  source primary keys and every data quality check performed.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_record_pharm": {"name": "duplicate_record_pharm", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_pharm_claim_record": {"name": "duplicate_pharm_claim_record", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_pharm_claim_id": {"name": "duplicate_pharm_claim_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_patient_id": {"name": "missing_pharm_claim_patient_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_patient_id_fk": {"name": "missing_pharm_claim_patient_id_fk", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_id": {"name": "missing_pharm_claim_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_line_number": {"name": "missing_pharm_claim_line_number", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_dispensing_date": {"name": "missing_dispensing_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_dispensing_date": {"name": "invalid_dispensing_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_paid_date": {"name": "missing_pharm_claim_paid_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_pharm_claim_paid_date": {"name": "invalid_pharm_claim_paid_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_paid_amount": {"name": "missing_pharm_claim_paid_amount", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_prescribing_provider_npi": {"name": "missing_prescribing_provider_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_dispensing_provider_npi": {"name": "missing_dispensing_provider_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_ndc": {"name": "missing_ndc", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_date": {"name": "run_date", "description": "Datetime the model was run used for snapshots", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://models/claims_input_layer/config/pharmacy_claim_detail.yml", "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/pharmacy_claim_detail.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.551869, "compiled_sql": "with pharmacy_claim as (\n\n    select * from tuva.data_profiling.base_pharmacy_claim\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from pharmacy_claim\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_claim_id as (\n\n    select distinct claim_id\n    from (\n        select\n              claim_id\n            , claim_line_number\n        from pharmacy_claim\n        group by\n              claim_id\n            , claim_line_number\n        having count (*) > 1\n    )\n\n),\n\nmissing_fk_patient_id as (\n\n    select distinct pharmacy_claim.row_hash\n    from pharmacy_claim\n         left join tuva.data_profiling.base_eligibility as eligibility\n         on pharmacy_claim.patient_id = eligibility.patient_id\n    where eligibility.patient_id is null\n\n),\n\njoined as (\n\n    select\n          pharmacy_claim.claim_id\n        , pharmacy_claim.claim_line_number\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_pharm_claim_record\n        , case\n            when duplicate_claim_id.claim_id is null then 0\n            else 1\n          end as duplicate_pharm_claim_id\n        , \n\n    case\n      when pharmacy_claim.patient_id is null or cast(pharmacy_claim.patient_id as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_patient_id\n        , case\n            when missing_fk_patient_id.row_hash is null then 0\n            else 1\n          end as missing_pharm_claim_patient_id_fk\n        , \n\n    case\n      when pharmacy_claim.claim_id is null or cast(pharmacy_claim.claim_id as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_id\n        , \n\n    case\n      when pharmacy_claim.claim_line_number is null or cast(pharmacy_claim.claim_line_number as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_line_number\n        , \n\n    case\n      when pharmacy_claim.dispensing_date is null or cast(pharmacy_claim.dispensing_date as string) = '' then 1\n      else 0\n    end as missing_dispensing_date\n        , case\n      when pharmacy_claim.dispensing_date is null then 0\n      when try_cast(pharmacy_claim.dispensing_date as date) is not null\n        and try_cast(pharmacy_claim.dispensing_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_dispensing_date\n        , \n\n    case\n      when pharmacy_claim.paid_date is null or cast(pharmacy_claim.paid_date as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_paid_date\n        , case\n      when pharmacy_claim.paid_date is null then 0\n      when try_cast(pharmacy_claim.paid_date as date) is not null\n        and try_cast(pharmacy_claim.paid_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_pharm_claim_paid_date\n        , \n\n    case\n      when pharmacy_claim.paid_amount is null or cast(pharmacy_claim.paid_amount as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_paid_amount\n        , \n\n    case\n      when pharmacy_claim.prescribing_provider_npi is null or cast(pharmacy_claim.prescribing_provider_npi as string) = '' then 1\n      else 0\n    end as missing_prescribing_provider_npi\n        , \n\n    case\n      when pharmacy_claim.dispensing_provider_npi is null or cast(pharmacy_claim.dispensing_provider_npi as string) = '' then 1\n      else 0\n    end as missing_dispensing_provider_npi\n        , \n\n    case\n      when pharmacy_claim.ndc is null or cast(pharmacy_claim.ndc as string) = '' then 1\n      else 0\n    end as missing_ndc\n    from pharmacy_claim\n         left join duplicate_record\n            on pharmacy_claim.row_hash = duplicate_record.row_hash\n         left join duplicate_claim_id\n            on pharmacy_claim.claim_id = duplicate_claim_id.claim_id\n         left join missing_fk_patient_id\n            on pharmacy_claim.row_hash = missing_fk_patient_id.row_hash\n\n)\n\nselect\n      \n\n    cast( claim_id as string ) as claim_id\n    , \n\n    cast( claim_line_number as string ) as claim_line_number\n    , duplicate_pharm_claim_record\n    , duplicate_pharm_claim_id\n    , missing_pharm_claim_patient_id\n    , missing_pharm_claim_patient_id_fk\n    , missing_pharm_claim_id\n    , missing_pharm_claim_line_number\n    , missing_dispensing_date\n    , invalid_dispensing_date\n    , missing_pharm_claim_paid_date\n    , invalid_pharm_claim_paid_date\n    , missing_pharm_claim_paid_amount\n    , missing_prescribing_provider_npi\n    , missing_dispensing_provider_npi\n    , missing_ndc\n    , \n\n    cast(current_timestamp() as timestamp) as run_date\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.pharmacy_claim_detail"}, "model.data_profiling.claim_summary": {"raw_sql": "{%- if target.type in ('redshift') -%}\n{{\n  config(\n    sort = ['test_id']\n  )\n}}\n{%- elif target.type in ('bigquery', 'snowflake') -%}\n{{\n  config(\n    cluster_by = ['test_id']\n  )\n}}\n{%- else -%}\n{%- endif -%}\n\n{#-\n    ***************************************************************\n    setting vars for unique counts, total counts, and test columns\n    ***************************************************************\n-#}\n\n{% set institutional_claim_count -%}\n    (select count(*)\n     from {{ ref('base_medical_claim') }}\n     where claim_type = 'institutional')\n{% endset -%}\n\n{% set professional_claim_count -%}\n    (select count(*)\n     from {{ ref('base_medical_claim') }}\n     where claim_type = 'professional')\n{% endset -%}\n\n{% set total_eligibility_count -%}\n    (select count(*)\n     from {{ ref('base_eligibility') }})\n{% endset -%}\n\n{% set total_med_claim_count -%}\n    (select count(*)\n     from {{ ref('base_medical_claim') }})\n{% endset -%}\n\n{% set total_pharm_claim_count -%}\n    (select count(*)\n     from {{ ref('base_pharmacy_claim') }})\n{% endset -%}\n\n{% set eligibility_column_list = [\n      'duplicate_eligibility_record'\n    , 'duplicate_patient_id'\n    , 'missing_eligibility_patient_id'\n    , 'missing_eligibility_member_id'\n    , 'missing_enrollment_start_date'\n    , 'invalid_enrollment_start_date'\n    , 'missing_enrollment_end_date'\n    , 'invalid_enrollment_end_date'\n    , 'invalid_enrollment_end_before_start'\n    , 'missing_birth_date'\n    , 'invalid_birth_date'\n    , 'missing_death_date'\n    , 'invalid_death_date'\n    , 'invalid_death_before_birth'\n    , 'missing_gender'\n    , 'invalid_gender'\n] -%}\n\n{% set medical_claim_column_list = [\n      'duplicate_med_claim_record'\n    , 'duplicate_med_claim_id'\n    , 'missing_med_claim_patient_id'\n    , 'missing_med_claim_patient_id_fk'\n    , 'missing_med_claim_id'\n    , 'missing_med_claim_line_number'\n    , 'missing_claim_type'\n    , 'invalid_claim_type'\n    , 'missing_claim_start_date'\n    , 'invalid_claim_start_date'\n    , 'missing_claim_end_date'\n    , 'invalid_claim_end_date'\n    , 'invalid_claim_end_before_start'\n    , 'missing_admission_date'\n    , 'invalid_admission_date'\n    , 'missing_discharge_date'\n    , 'invalid_discharge_date'\n    , 'invalid_discharge_before_admission'\n    , 'missing_med_claim_paid_date'\n    , 'invalid_med_claim_paid_date'\n    , 'missing_med_claim_paid_amount'\n    , 'missing_bill_type_code'\n    , 'invalid_bill_type_code'\n    , 'missing_place_of_service_code'\n    , 'invalid_place_of_service_code'\n    , 'missing_revenue_center_code'\n    , 'invalid_revenue_center_code'\n    , 'missing_diagnosis_code_1'\n    , 'invalid_diagnosis_code_1'\n    , 'missing_diagnosis_poa_1'\n    , 'invalid_diagnosis_poa_1'\n    , 'missing_hcpcs_code'\n    , 'invalid_discharge_disposition_code'\n    , 'invalid_ms_drg'\n    , 'missing_billing_npi'\n    , 'missing_facility_npi'\n    , 'missing_rendering_npi'\n] -%}\n\n{% set pharmacy_claim_column_list = [\n      'duplicate_pharm_claim_record'\n    , 'duplicate_pharm_claim_id'\n    , 'missing_pharm_claim_patient_id'\n    , 'missing_pharm_claim_patient_id_fk'\n    , 'missing_pharm_claim_id'\n    , 'missing_pharm_claim_line_number'\n    , 'missing_dispensing_date'\n    , 'invalid_dispensing_date'\n    , 'missing_pharm_claim_paid_date'\n    , 'invalid_pharm_claim_paid_date'\n    , 'missing_pharm_claim_paid_amount'\n    , 'missing_prescribing_provider_npi'\n    , 'missing_dispensing_provider_npi'\n    , 'missing_ndc'\n] -%}\n\nwith eligibility_detail as (\n\n    select * from {{ ref('eligibility_detail') }}\n\n),\n\nmedical_claim_detail as (\n\n    select * from {{ ref('medical_claim_detail') }}\n\n),\n\npharmacy_claim_detail as (\n\n    select * from {{ ref('pharmacy_claim_detail') }}\n\n),\n\nseed_test_catalog as (\n\n    select * from {{ ref('test_catalog') }}\n\n),\n\nsum_eligibility_detail as (\n\n    {{ sum_all_checks_in_table('eligibility_detail', eligibility_column_list) }}\n\n),\n\nsum_medical_claim_detail as (\n\n    {{ sum_all_checks_in_table('medical_claim_detail', medical_claim_column_list) }}\n\n),\n\nsum_pharmacy_claim_detail as (\n\n    {{ sum_all_checks_in_table('pharmacy_claim_detail', pharmacy_claim_column_list) }}\n\n),\n\nadd_denominator_eligibility_detail as (\n\n    select\n          table_name as test_table_name\n        , '{{ var(\"eligibility\") }}' as source_table_name\n        , test_name\n        , test_fail_numerator\n        , {{ total_eligibility_count }} as test_fail_denominator\n    from sum_eligibility_detail\n\n),\n\nadd_denominator_medical_claim_detail as (\n\n    select\n          table_name as test_table_name\n        , '{{ var(\"medical_claim\") }}' as source_table_name\n        , test_name\n        , test_fail_numerator\n        , case\n            when test_name in (\n                  'invalid_admission_date'\n                , 'invalid_discharge_date'\n                , 'missing_admission_date'\n                , 'missing_bill_type_code'\n                , 'missing_diagnosis_poa_1'\n                , 'missing_discharge_date'\n                , 'missing_facility_npi'\n                , 'missing_revenue_center_code'\n               ) then {{ institutional_claim_count }}\n            when test_name in (\n                  'missing_billing_npi'\n                , 'missing_hcpcs_code'\n                , 'missing_place_of_service_code'\n                ) then {{ professional_claim_count }}\n            else {{ total_med_claim_count }}\n          end as test_fail_denominator\n    from sum_medical_claim_detail\n\n),\n\nadd_denominator_pharmacy_claim_detail as (\n\n    select\n          table_name as test_table_name\n        , '{{ var(\"pharmacy_claim\") }}' as source_table_name\n        , test_name\n        , test_fail_numerator\n        , {{ total_pharm_claim_count }} as test_fail_denominator\n    from sum_pharmacy_claim_detail\n\n),\n\nadd_totals_eligibility_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100 as test_fail_percentage\n    from add_denominator_eligibility_detail\n\n),\n\nadd_totals_medical_claim_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100 as test_fail_percentage\n    from add_denominator_medical_claim_detail\n\n),\n\nadd_totals_pharmacy_claim_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100 as test_fail_percentage\n    from add_denominator_pharmacy_claim_detail\n\n),\n\nunion_details as (\n\n    select * from add_totals_eligibility_detail\n    union all\n    select * from add_totals_medical_claim_detail\n    union all\n    select * from add_totals_pharmacy_claim_detail\n\n),\n\nadd_catalog_details as (\n\n    select\n          union_details.test_table_name\n        , union_details.source_table_name\n        , union_details.test_name\n        , union_details.test_fail_numerator\n        , union_details.test_fail_denominator\n        , union_details.test_fail_percentage\n        , seed_test_catalog.columns\n        , seed_test_catalog.test_id\n        , seed_test_catalog.description as test_description\n        , seed_test_catalog.severity as test_severity\n    from union_details\n         left join seed_test_catalog\n         on union_details.test_name = seed_test_catalog.test_name\n\n)\n\nselect\n      test_id\n    , test_name\n    , source_table_name\n    , test_severity\n    , test_fail_percentage\n    , test_fail_numerator\n    , test_fail_denominator\n    , test_description\n    , test_table_name\n    , columns\n    , {{ current_date_or_timestamp('timestamp') }} as run_date\nfrom add_catalog_details\nwhere (test_fail_numerator is not null\nand test_fail_denominator > 0)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.data_profiling.sum_all_checks_in_table", "macro.data_profiling.current_date_or_timestamp"], "nodes": ["source.data_profiling.cclf.eligibility", "source.data_profiling.cclf.medical_claim", "source.data_profiling.cclf.pharmacy_claim", "model.data_profiling.base_medical_claim", "model.data_profiling.base_medical_claim", "model.data_profiling.base_eligibility", "model.data_profiling.base_medical_claim", "model.data_profiling.base_pharmacy_claim", "model.data_profiling.eligibility_detail", "model.data_profiling.medical_claim_detail", "model.data_profiling.pharmacy_claim_detail", "seed.data_profiling.test_catalog"]}, "config": {"enabled": true, "alias": null, "schema": "data_profiling", "database": "tuva", "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "cluster_by": ["test_id"], "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "claims_input_layer", "claim_summary"], "unique_id": "model.data_profiling.claim_summary", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "claims_input_layer/claim_summary.sql", "original_file_path": "models/claims_input_layer/claim_summary.sql", "name": "claim_summary", "alias": "claim_summary", "checksum": {"name": "sha256", "checksum": "48e4ad1626bff971b556549c655b517871def77a119f34c12f76a03f7af569a2"}, "tags": [], "refs": [["base_medical_claim"], ["base_medical_claim"], ["base_eligibility"], ["base_medical_claim"], ["base_pharmacy_claim"], ["eligibility_detail"], ["medical_claim_detail"], ["pharmacy_claim_detail"], ["test_catalog"]], "sources": [["cclf", "eligibility"], ["cclf", "medical_claim"], ["cclf", "pharmacy_claim"]], "description": "Summary of checks ran on every column in eligibility_detail, medical_claim_detail, and pharmacy_claim_detail.\n", "columns": {"test_id": {"name": "test_id", "description": "Unique identifier for the data profiling test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_name": {"name": "test_name", "description": "Unique column name of the test. Join to test_catalog  on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_table_name": {"name": "source_table_name", "description": "The name of the source table the test is ran on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_severity": {"name": "test_severity", "description": "Indicates the severity of a test failure if test_fail_numerator > 0\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_fail_percentage": {"name": "test_fail_percentage", "description": "Percentage of records that failed test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_fail_numerator": {"name": "test_fail_numerator", "description": "Total count of records that failed the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_fail_denominator": {"name": "test_fail_denominator", "description": "Total count of records the test was applied to, in some cases this may be a claim type count (institutional claims,  professional claims) \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_description": {"name": "test_description", "description": "Guideline or reasoning for the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_table_name": {"name": "test_table_name", "description": "The name of the data profiling detail table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "columns": {"name": "columns", "description": "List of column(s) the test runs on - makes it easy to filter test  results to certain columns\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_date": {"name": "run_date", "description": "Datetime the model was run used for snapshots", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://models/claims_input_layer/config/claim_summary.yml", "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/claim_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"cluster_by": ["test_id"]}, "created_at": 1667409880.545921, "compiled_sql": "with eligibility_detail as (\n\n    select * from tuva.data_profiling.eligibility_detail\n\n),\n\nmedical_claim_detail as (\n\n    select * from tuva.data_profiling.medical_claim_detail\n\n),\n\npharmacy_claim_detail as (\n\n    select * from tuva.data_profiling.pharmacy_claim_detail\n\n),\n\nseed_test_catalog as (\n\n    select * from tuva.data_profiling.test_catalog\n\n),\n\nsum_eligibility_detail as (\n\n    \n\n),\n\nsum_medical_claim_detail as (\n\n    \n\n),\n\nsum_pharmacy_claim_detail as (\n\n    \n\n),\n\nadd_denominator_eligibility_detail as (\n\n    select\n          table_name as test_table_name\n        , 'tuva.claims_input.eligibility' as source_table_name\n        , test_name\n        , test_fail_numerator\n        , (select count(*)\n     from tuva.data_profiling.base_eligibility)\n as test_fail_denominator\n    from sum_eligibility_detail\n\n),\n\nadd_denominator_medical_claim_detail as (\n\n    select\n          table_name as test_table_name\n        , 'tuva.claims_input.medical_claim' as source_table_name\n        , test_name\n        , test_fail_numerator\n        , case\n            when test_name in (\n                  'invalid_admission_date'\n                , 'invalid_discharge_date'\n                , 'missing_admission_date'\n                , 'missing_bill_type_code'\n                , 'missing_diagnosis_poa_1'\n                , 'missing_discharge_date'\n                , 'missing_facility_npi'\n                , 'missing_revenue_center_code'\n               ) then (select count(*)\n     from tuva.data_profiling.base_medical_claim\n     where claim_type = 'institutional')\n\n            when test_name in (\n                  'missing_billing_npi'\n                , 'missing_hcpcs_code'\n                , 'missing_place_of_service_code'\n                ) then (select count(*)\n     from tuva.data_profiling.base_medical_claim\n     where claim_type = 'professional')\n\n            else (select count(*)\n     from tuva.data_profiling.base_medical_claim)\n\n          end as test_fail_denominator\n    from sum_medical_claim_detail\n\n),\n\nadd_denominator_pharmacy_claim_detail as (\n\n    select\n          table_name as test_table_name\n        , 'tuva.claims_input.pharmacy_claim' as source_table_name\n        , test_name\n        , test_fail_numerator\n        , (select count(*)\n     from tuva.data_profiling.base_pharmacy_claim)\n as test_fail_denominator\n    from sum_pharmacy_claim_detail\n\n),\n\nadd_totals_eligibility_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100 as test_fail_percentage\n    from add_denominator_eligibility_detail\n\n),\n\nadd_totals_medical_claim_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100 as test_fail_percentage\n    from add_denominator_medical_claim_detail\n\n),\n\nadd_totals_pharmacy_claim_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100 as test_fail_percentage\n    from add_denominator_pharmacy_claim_detail\n\n),\n\nunion_details as (\n\n    select * from add_totals_eligibility_detail\n    union all\n    select * from add_totals_medical_claim_detail\n    union all\n    select * from add_totals_pharmacy_claim_detail\n\n),\n\nadd_catalog_details as (\n\n    select\n          union_details.test_table_name\n        , union_details.source_table_name\n        , union_details.test_name\n        , union_details.test_fail_numerator\n        , union_details.test_fail_denominator\n        , union_details.test_fail_percentage\n        , seed_test_catalog.columns\n        , seed_test_catalog.test_id\n        , seed_test_catalog.description as test_description\n        , seed_test_catalog.severity as test_severity\n    from union_details\n         left join seed_test_catalog\n         on union_details.test_name = seed_test_catalog.test_name\n\n)\n\nselect\n      test_id\n    , test_name\n    , source_table_name\n    , test_severity\n    , test_fail_percentage\n    , test_fail_numerator\n    , test_fail_denominator\n    , test_description\n    , test_table_name\n    , columns\n    , \n\n    cast(current_timestamp() as timestamp) as run_date\nfrom add_catalog_details\nwhere (test_fail_numerator is not null\nand test_fail_denominator > 0)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.claim_summary"}, "model.data_profiling.base_pharmacy_claim": {"raw_sql": "/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty pharmacy claim table is used instead.\n*/\nwith pharmacy_claim_src as (\n\n    {% set relation_exists = (load_relation(source(var('source_name'),'pharmacy_claim'))) is not none -%}\n\n    {%- if relation_exists -%}\n    {{- log(\"Pharmacy claim source exists.\", info=true) -}}\n\n    select * from {{ var('pharmacy_claim') }}\n\n    {%- else -%}\n    {{- log(\"Pharmacy claim source doesn't exist using an empty table instead.\", info=true) -}}\n\n    /*\n        casting fields used in joins and tests to correct data types\n        casting other fields to varchar to prevent unknown type errors\n    */\n    select\n          {{ cast_string_or_varchar('null') }} as claim_id\n        , {{ cast_string_or_varchar('null') }} as claim_line_number\n        , {{ cast_string_or_varchar('null') }} as patient_id\n        , {{ cast_string_or_varchar('null') }} as member_id\n        , {{ cast_string_or_varchar('null') }} as prescribing_provider_npi\n        , {{ cast_string_or_varchar('null') }} as dispensing_provider_npi\n        , cast(null as date) as dispensing_date\n        , {{ cast_string_or_varchar('null') }} as ndc\n        , {{ cast_string_or_varchar('null') }} as quantity\n        , {{ cast_string_or_varchar('null') }} as days_supply\n        , {{ cast_string_or_varchar('null') }} as refills\n        , cast(null as date) as paid_date\n        , {{ cast_string_or_varchar('null') }} as paid_amount\n        , {{ cast_string_or_varchar('null') }} as allowed_amount\n        , {{ cast_string_or_varchar('null') }} as data_source\n    limit 0\n\n    {%- endif %}\n\n),\n\npharmacy_claim_with_row_hash as (\n\n    select *\n         , {{ dbt_utils.surrogate_key([\n                  'claim_id'\n                , 'claim_line_number'\n                , 'patient_id'\n                , 'member_id'\n                , 'prescribing_provider_npi'\n                , 'dispensing_provider_npi'\n                , 'dispensing_date'\n                , 'ndc'\n                , 'quantity'\n                , 'days_supply'\n                , 'refills'\n                , 'paid_date'\n                , 'paid_amount'\n                , 'allowed_amount'\n                , 'data_source'\n               ]) }}\n           as row_hash\n    from pharmacy_claim_src\n\n)\n\nselect * from pharmacy_claim_with_row_hash", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.data_profiling.cast_string_or_varchar", "macro.dbt_utils.surrogate_key"], "nodes": ["source.data_profiling.cclf.pharmacy_claim"]}, "config": {"enabled": true, "alias": null, "schema": "data_profiling", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "claims_input_layer", "base", "base_pharmacy_claim"], "unique_id": "model.data_profiling.base_pharmacy_claim", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "claims_input_layer/base/base_pharmacy_claim.sql", "original_file_path": "models/claims_input_layer/base/base_pharmacy_claim.sql", "name": "base_pharmacy_claim", "alias": "base_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "9de5346642828e030e6f3b164ae6bc5554a9d39c8fbf8ac562fec5c67624aaad"}, "tags": [], "refs": [], "sources": [["cclf", "pharmacy_claim"]], "description": "Base model for pharmacy claim source data. Includes logic to create an  empty table if the source is missing and adds a row_hash column.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://models/claims_input_layer/base/config/base_pharmacy_claim.yml", "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/base/base_pharmacy_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.562218, "compiled_sql": "/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty pharmacy claim table is used instead.\n*/\nwith pharmacy_claim_src as (\n\n    /*\n        casting fields used in joins and tests to correct data types\n        casting other fields to varchar to prevent unknown type errors\n    */\n    select\n          \n\n    cast( null as string ) as claim_id\n        , \n\n    cast( null as string ) as claim_line_number\n        , \n\n    cast( null as string ) as patient_id\n        , \n\n    cast( null as string ) as member_id\n        , \n\n    cast( null as string ) as prescribing_provider_npi\n        , \n\n    cast( null as string ) as dispensing_provider_npi\n        , cast(null as date) as dispensing_date\n        , \n\n    cast( null as string ) as ndc\n        , \n\n    cast( null as string ) as quantity\n        , \n\n    cast( null as string ) as days_supply\n        , \n\n    cast( null as string ) as refills\n        , cast(null as date) as paid_date\n        , \n\n    cast( null as string ) as paid_amount\n        , \n\n    cast( null as string ) as allowed_amount\n        , \n\n    cast( null as string ) as data_source\n    limit 0\n\n),\n\npharmacy_claim_with_row_hash as (\n\n    select *\n         , md5(cast(coalesce(cast(claim_id as \n    varchar\n), '') || '-' || coalesce(cast(claim_line_number as \n    varchar\n), '') || '-' || coalesce(cast(patient_id as \n    varchar\n), '') || '-' || coalesce(cast(member_id as \n    varchar\n), '') || '-' || coalesce(cast(prescribing_provider_npi as \n    varchar\n), '') || '-' || coalesce(cast(dispensing_provider_npi as \n    varchar\n), '') || '-' || coalesce(cast(dispensing_date as \n    varchar\n), '') || '-' || coalesce(cast(ndc as \n    varchar\n), '') || '-' || coalesce(cast(quantity as \n    varchar\n), '') || '-' || coalesce(cast(days_supply as \n    varchar\n), '') || '-' || coalesce(cast(refills as \n    varchar\n), '') || '-' || coalesce(cast(paid_date as \n    varchar\n), '') || '-' || coalesce(cast(paid_amount as \n    varchar\n), '') || '-' || coalesce(cast(allowed_amount as \n    varchar\n), '') || '-' || coalesce(cast(data_source as \n    varchar\n), '') as \n    varchar\n))\n           as row_hash\n    from pharmacy_claim_src\n\n)\n\nselect * from pharmacy_claim_with_row_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.base_pharmacy_claim"}, "model.data_profiling.base_eligibility": {"raw_sql": "/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty eligibility table is used instead.\n*/\nwith eligibility_src as (\n\n    {% set relation_exists = (load_relation(source(var('source_name'),'eligibility'))) is not none -%}\n\n    {%- if relation_exists -%}\n    {{- log(\"Eligibility source exists.\", info=true) -}}\n\n    select * from {{ var('eligibility') }}\n\n    {%- else -%}\n    {{- log(\"Eligibility source doesn't exist using an empty table instead.\", info=true) -}}\n\n    /*\n        casting fields used in joins and tests to correct data types\n        casting other fields to varchar to prevent unknown type errors\n    */\n    select\n          {{ cast_string_or_varchar('null') }} as patient_id\n        , {{ cast_string_or_varchar('null') }} as member_id\n        , {{ cast_string_or_varchar('null') }} as gender\n        , {{ cast_string_or_varchar('null') }} as race\n        , cast(null as date) as birth_date\n        , cast(null as date) as death_date\n        , {{ cast_string_or_varchar('null') }} as death_flag\n        , cast(null as date) as enrollment_start_date\n        , cast(null as date) as enrollment_end_date\n        , {{ cast_string_or_varchar('null') }} as payer\n        , {{ cast_string_or_varchar('null') }} as payer_type\n        , {{ cast_string_or_varchar('null') }} as dual_status_code\n        , {{ cast_string_or_varchar('null') }} as medicare_status_code\n        , {{ cast_string_or_varchar('null') }} as first_name\n        , {{ cast_string_or_varchar('null') }} as last_name\n        , {{ cast_string_or_varchar('null') }} as address\n        , {{ cast_string_or_varchar('null') }} as city\n        , {{ cast_string_or_varchar('null') }} as state\n        , {{ cast_string_or_varchar('null') }} as zip_code\n        , {{ cast_string_or_varchar('null') }} as phone\n        , {{ cast_string_or_varchar('null') }} as data_source\n    limit 0\n\n    {%- endif %}\n\n),\n\neligibility_with_row_hash as (\n\n    select *\n         , {{ dbt_utils.surrogate_key([\n                  'patient_id'\n                , 'member_id'\n                , 'gender'\n                , 'race'\n                , 'birth_date'\n                , 'death_date'\n                , 'death_flag'\n                , 'enrollment_start_date'\n                , 'enrollment_end_date'\n                , 'payer'\n                , 'payer_type'\n                , 'dual_status_code'\n                , 'medicare_status_code'\n                , 'first_name'\n                , 'last_name'\n                , 'address'\n                , 'city'\n                , 'state'\n                , 'zip_code'\n                , 'phone'\n                , 'data_source'\n               ]) }}\n           as row_hash\n    from eligibility_src\n\n)\n\nselect * from eligibility_with_row_hash", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.data_profiling.cast_string_or_varchar", "macro.dbt_utils.surrogate_key"], "nodes": ["source.data_profiling.cclf.eligibility"]}, "config": {"enabled": true, "alias": null, "schema": "data_profiling", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "claims_input_layer", "base", "base_eligibility"], "unique_id": "model.data_profiling.base_eligibility", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "claims_input_layer/base/base_eligibility.sql", "original_file_path": "models/claims_input_layer/base/base_eligibility.sql", "name": "base_eligibility", "alias": "base_eligibility", "checksum": {"name": "sha256", "checksum": "bfe8c995839104ef70e83b641d62edc436dc9e2430d71f1ca4134aee565d086e"}, "tags": [], "refs": [], "sources": [["cclf", "eligibility"]], "description": "Base model for eligibility source data. Includes logic to create an empty table if the source is missing and adds a row_hash column.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://models/claims_input_layer/base/config/base_eligibility.yml", "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/base/base_eligibility.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.565032, "compiled_sql": "/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty eligibility table is used instead.\n*/\nwith eligibility_src as (\n\n    /*\n        casting fields used in joins and tests to correct data types\n        casting other fields to varchar to prevent unknown type errors\n    */\n    select\n          \n\n    cast( null as string ) as patient_id\n        , \n\n    cast( null as string ) as member_id\n        , \n\n    cast( null as string ) as gender\n        , \n\n    cast( null as string ) as race\n        , cast(null as date) as birth_date\n        , cast(null as date) as death_date\n        , \n\n    cast( null as string ) as death_flag\n        , cast(null as date) as enrollment_start_date\n        , cast(null as date) as enrollment_end_date\n        , \n\n    cast( null as string ) as payer\n        , \n\n    cast( null as string ) as payer_type\n        , \n\n    cast( null as string ) as dual_status_code\n        , \n\n    cast( null as string ) as medicare_status_code\n        , \n\n    cast( null as string ) as first_name\n        , \n\n    cast( null as string ) as last_name\n        , \n\n    cast( null as string ) as address\n        , \n\n    cast( null as string ) as city\n        , \n\n    cast( null as string ) as state\n        , \n\n    cast( null as string ) as zip_code\n        , \n\n    cast( null as string ) as phone\n        , \n\n    cast( null as string ) as data_source\n    limit 0\n\n),\n\neligibility_with_row_hash as (\n\n    select *\n         , md5(cast(coalesce(cast(patient_id as \n    varchar\n), '') || '-' || coalesce(cast(member_id as \n    varchar\n), '') || '-' || coalesce(cast(gender as \n    varchar\n), '') || '-' || coalesce(cast(race as \n    varchar\n), '') || '-' || coalesce(cast(birth_date as \n    varchar\n), '') || '-' || coalesce(cast(death_date as \n    varchar\n), '') || '-' || coalesce(cast(death_flag as \n    varchar\n), '') || '-' || coalesce(cast(enrollment_start_date as \n    varchar\n), '') || '-' || coalesce(cast(enrollment_end_date as \n    varchar\n), '') || '-' || coalesce(cast(payer as \n    varchar\n), '') || '-' || coalesce(cast(payer_type as \n    varchar\n), '') || '-' || coalesce(cast(dual_status_code as \n    varchar\n), '') || '-' || coalesce(cast(medicare_status_code as \n    varchar\n), '') || '-' || coalesce(cast(first_name as \n    varchar\n), '') || '-' || coalesce(cast(last_name as \n    varchar\n), '') || '-' || coalesce(cast(address as \n    varchar\n), '') || '-' || coalesce(cast(city as \n    varchar\n), '') || '-' || coalesce(cast(state as \n    varchar\n), '') || '-' || coalesce(cast(zip_code as \n    varchar\n), '') || '-' || coalesce(cast(phone as \n    varchar\n), '') || '-' || coalesce(cast(data_source as \n    varchar\n), '') as \n    varchar\n))\n           as row_hash\n    from eligibility_src\n\n)\n\nselect * from eligibility_with_row_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.base_eligibility"}, "model.data_profiling.base_medical_claim": {"raw_sql": "/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty medical claim table is used instead.\n*/\nwith medical_claim_src as (\n\n    {% set relation_exists = (load_relation(source(var('source_name'),'medical_claim'))) is not none -%}\n\n    {%- if relation_exists -%}\n    {{- log(\"Medical claim source exists.\", info=true) -}}\n\n    select * from {{ var('medical_claim') }}\n\n    {%- else -%}\n    {{- log(\"Medical claim source doesn't exist using an empty table instead.\", info=true) -}}\n\n    /*\n        casting fields used in joins and tests to correct data types\n        casting other fields to varchar to prevent unknown type errors\n    */\n    select\n          {{ cast_string_or_varchar('null') }} as claim_id\n        , {{ cast_string_or_varchar('null') }} as claim_line_number\n        , {{ cast_string_or_varchar('null') }} as claim_type\n        , {{ cast_string_or_varchar('null') }} as patient_id\n        , {{ cast_string_or_varchar('null') }} as member_id\n        , cast(null as date) as claim_start_date\n        , cast(null as date) as claim_end_date\n        , cast(null as date) as claim_line_start_date\n        , cast(null as date) as claim_line_end_date\n        , cast(null as date) as admission_date\n        , cast(null as date) as discharge_date\n        , {{ cast_string_or_varchar('null') }} as admit_source_code\n        , {{ cast_string_or_varchar('null') }} as admit_type_code\n        , {{ cast_string_or_varchar('null') }} as discharge_disposition_code\n        , {{ cast_string_or_varchar('null') }} as place_of_service_code\n        , {{ cast_string_or_varchar('null') }} as bill_type_code\n        , {{ cast_string_or_varchar('null') }} as ms_drg\n        , {{ cast_string_or_varchar('null') }} as revenue_center_code\n        , {{ cast_string_or_varchar('null') }} as service_unit_quantity\n        , {{ cast_string_or_varchar('null') }} as hcpcs_code\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_1\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_2\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_3\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_4\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_5\n        , {{ cast_string_or_varchar('null') }} as rendering_npi\n        , {{ cast_string_or_varchar('null') }} as billing_npi\n        , {{ cast_string_or_varchar('null') }} as facility_npi\n        , cast(null as date) as paid_date\n        , {{ cast_string_or_varchar('null') }} as paid_amount\n        , {{ cast_string_or_varchar('null') }} as allowed_amount\n        , {{ cast_string_or_varchar('null') }} as charge_amount\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_type\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_1\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_2\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_3\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_4\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_5\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_6\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_7\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_8\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_9\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_10\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_11\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_12\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_13\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_14\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_15\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_16\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_17\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_18\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_19\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_20\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_21\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_22\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_23\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_24\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_25\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_1\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_2\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_3\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_4\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_5\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_6\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_7\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_8\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_9\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_10\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_11\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_12\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_13\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_14\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_15\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_16\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_17\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_18\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_19\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_20\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_21\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_22\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_23\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_24\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_25\n        , {{ cast_string_or_varchar('null') }} as procedure_code_type\n        , {{ cast_string_or_varchar('null') }} as procedure_code_1\n        , {{ cast_string_or_varchar('null') }} as procedure_code_2\n        , {{ cast_string_or_varchar('null') }} as procedure_code_3\n        , {{ cast_string_or_varchar('null') }} as procedure_code_4\n        , {{ cast_string_or_varchar('null') }} as procedure_code_5\n        , {{ cast_string_or_varchar('null') }} as procedure_code_6\n        , {{ cast_string_or_varchar('null') }} as procedure_code_7\n        , {{ cast_string_or_varchar('null') }} as procedure_code_8\n        , {{ cast_string_or_varchar('null') }} as procedure_code_9\n        , {{ cast_string_or_varchar('null') }} as procedure_code_10\n        , {{ cast_string_or_varchar('null') }} as procedure_code_11\n        , {{ cast_string_or_varchar('null') }} as procedure_code_12\n        , {{ cast_string_or_varchar('null') }} as procedure_code_13\n        , {{ cast_string_or_varchar('null') }} as procedure_code_14\n        , {{ cast_string_or_varchar('null') }} as procedure_code_15\n        , {{ cast_string_or_varchar('null') }} as procedure_code_16\n        , {{ cast_string_or_varchar('null') }} as procedure_code_17\n        , {{ cast_string_or_varchar('null') }} as procedure_code_18\n        , {{ cast_string_or_varchar('null') }} as procedure_code_19\n        , {{ cast_string_or_varchar('null') }} as procedure_code_20\n        , {{ cast_string_or_varchar('null') }} as procedure_code_21\n        , {{ cast_string_or_varchar('null') }} as procedure_code_22\n        , {{ cast_string_or_varchar('null') }} as procedure_code_23\n        , {{ cast_string_or_varchar('null') }} as procedure_code_24\n        , {{ cast_string_or_varchar('null') }} as procedure_code_25\n        , {{ cast_string_or_varchar('null') }} as procedure_date_1\n        , {{ cast_string_or_varchar('null') }} as procedure_date_2\n        , {{ cast_string_or_varchar('null') }} as procedure_date_3\n        , {{ cast_string_or_varchar('null') }} as procedure_date_4\n        , {{ cast_string_or_varchar('null') }} as procedure_date_5\n        , {{ cast_string_or_varchar('null') }} as procedure_date_6\n        , {{ cast_string_or_varchar('null') }} as procedure_date_7\n        , {{ cast_string_or_varchar('null') }} as procedure_date_8\n        , {{ cast_string_or_varchar('null') }} as procedure_date_9\n        , {{ cast_string_or_varchar('null') }} as procedure_date_10\n        , {{ cast_string_or_varchar('null') }} as procedure_date_11\n        , {{ cast_string_or_varchar('null') }} as procedure_date_12\n        , {{ cast_string_or_varchar('null') }} as procedure_date_13\n        , {{ cast_string_or_varchar('null') }} as procedure_date_14\n        , {{ cast_string_or_varchar('null') }} as procedure_date_15\n        , {{ cast_string_or_varchar('null') }} as procedure_date_16\n        , {{ cast_string_or_varchar('null') }} as procedure_date_17\n        , {{ cast_string_or_varchar('null') }} as procedure_date_18\n        , {{ cast_string_or_varchar('null') }} as procedure_date_19\n        , {{ cast_string_or_varchar('null') }} as procedure_date_20\n        , {{ cast_string_or_varchar('null') }} as procedure_date_21\n        , {{ cast_string_or_varchar('null') }} as procedure_date_22\n        , {{ cast_string_or_varchar('null') }} as procedure_date_23\n        , {{ cast_string_or_varchar('null') }} as procedure_date_24\n        , {{ cast_string_or_varchar('null') }} as procedure_date_25\n        , {{ cast_string_or_varchar('null') }} as data_source\n    limit 0\n\n    {%- endif %}\n\n),\n\nmedical_claim_with_row_hash as (\n\n    select *\n         , {{ dbt_utils.surrogate_key([\n                 'claim_id', 'claim_line_number', 'claim_type'\n               , 'patient_id', 'member_id', 'claim_start_date'\n               , 'claim_end_date', 'claim_line_start_date'\n               , 'claim_line_end_date', 'admission_date', 'discharge_date'\n               , 'admit_source_code', 'admit_type_code'\n               , 'discharge_disposition_code', 'place_of_service_code'\n               , 'bill_type_code', 'ms_drg', 'revenue_center_code'\n               , 'service_unit_quantity', 'hcpcs_code', 'hcpcs_modifier_1'\n               , 'hcpcs_modifier_2', 'hcpcs_modifier_3', 'hcpcs_modifier_4'\n               , 'hcpcs_modifier_5', 'rendering_npi', 'billing_npi'\n               , 'facility_npi', 'paid_date', 'paid_amount'\n               , 'allowed_amount', 'charge_amount', 'diagnosis_code_type'\n               , 'diagnosis_code_1', 'diagnosis_code_2', 'diagnosis_code_3'\n               , 'diagnosis_code_4', 'diagnosis_code_5', 'diagnosis_code_6'\n               , 'diagnosis_code_7', 'diagnosis_code_8', 'diagnosis_code_9'\n               , 'diagnosis_code_10', 'diagnosis_code_11', 'diagnosis_code_12'\n               , 'diagnosis_code_13', 'diagnosis_code_14', 'diagnosis_code_15'\n               , 'diagnosis_code_16', 'diagnosis_code_17', 'diagnosis_code_18'\n               , 'diagnosis_code_19', 'diagnosis_code_20', 'diagnosis_code_21'\n               , 'diagnosis_code_22', 'diagnosis_code_23', 'diagnosis_code_24'\n               , 'diagnosis_code_25', 'diagnosis_poa_1', 'diagnosis_poa_2'\n               , 'diagnosis_poa_3', 'diagnosis_poa_4', 'diagnosis_poa_5'\n               , 'diagnosis_poa_6', 'diagnosis_poa_7', 'diagnosis_poa_8'\n               , 'diagnosis_poa_9', 'diagnosis_poa_10', 'diagnosis_poa_11'\n               , 'diagnosis_poa_12', 'diagnosis_poa_13', 'diagnosis_poa_14'\n               , 'diagnosis_poa_15', 'diagnosis_poa_16', 'diagnosis_poa_17'\n               , 'diagnosis_poa_18', 'diagnosis_poa_19', 'diagnosis_poa_20'\n               , 'diagnosis_poa_21', 'diagnosis_poa_22', 'diagnosis_poa_23'\n               , 'diagnosis_poa_24', 'diagnosis_poa_25', 'procedure_code_type'\n               , 'procedure_code_1', 'procedure_code_2', 'procedure_code_3'\n               , 'procedure_code_4', 'procedure_code_5', 'procedure_code_6'\n               , 'procedure_code_7', 'procedure_code_8', 'procedure_code_9'\n               , 'procedure_code_10', 'procedure_code_11', 'procedure_code_12'\n               , 'procedure_code_13', 'procedure_code_14', 'procedure_code_15'\n               , 'procedure_code_16', 'procedure_code_17', 'procedure_code_18'\n               , 'procedure_code_19', 'procedure_code_20', 'procedure_code_21'\n               , 'procedure_code_22', 'procedure_code_23', 'procedure_code_24'\n               , 'procedure_code_25', 'procedure_date_1', 'procedure_date_2'\n               , 'procedure_date_3', 'procedure_date_4', 'procedure_date_5'\n               , 'procedure_date_6', 'procedure_date_7', 'procedure_date_8'\n               , 'procedure_date_9', 'procedure_date_10', 'procedure_date_11'\n               , 'procedure_date_12', 'procedure_date_13', 'procedure_date_14'\n               , 'procedure_date_15', 'procedure_date_16', 'procedure_date_17'\n               , 'procedure_date_18', 'procedure_date_19', 'procedure_date_20'\n               , 'procedure_date_21', 'procedure_date_22', 'procedure_date_23'\n               , 'procedure_date_24', 'procedure_date_25', 'data_source'\n               ]) }}\n           as row_hash\n    from medical_claim_src\n\n)\n\nselect * from medical_claim_with_row_hash", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.data_profiling.cast_string_or_varchar", "macro.dbt_utils.surrogate_key"], "nodes": ["source.data_profiling.cclf.medical_claim"]}, "config": {"enabled": true, "alias": null, "schema": "data_profiling", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "claims_input_layer", "base", "base_medical_claim"], "unique_id": "model.data_profiling.base_medical_claim", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "claims_input_layer/base/base_medical_claim.sql", "original_file_path": "models/claims_input_layer/base/base_medical_claim.sql", "name": "base_medical_claim", "alias": "base_medical_claim", "checksum": {"name": "sha256", "checksum": "3fb4270b9fd449bb7ceab9d12e46196adcec61b57d44fd43be7ff1491497b7db"}, "tags": [], "refs": [], "sources": [["cclf", "medical_claim"]], "description": "Base model for medical claim source data. Includes logic to create an  empty table if the source is missing and adds a row_hash column.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://models/claims_input_layer/base/config/base_medical_claim.yml", "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/base/base_medical_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.5635169, "compiled_sql": "/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty medical claim table is used instead.\n*/\nwith medical_claim_src as (\n\n    /*\n        casting fields used in joins and tests to correct data types\n        casting other fields to varchar to prevent unknown type errors\n    */\n    select\n          \n\n    cast( null as string ) as claim_id\n        , \n\n    cast( null as string ) as claim_line_number\n        , \n\n    cast( null as string ) as claim_type\n        , \n\n    cast( null as string ) as patient_id\n        , \n\n    cast( null as string ) as member_id\n        , cast(null as date) as claim_start_date\n        , cast(null as date) as claim_end_date\n        , cast(null as date) as claim_line_start_date\n        , cast(null as date) as claim_line_end_date\n        , cast(null as date) as admission_date\n        , cast(null as date) as discharge_date\n        , \n\n    cast( null as string ) as admit_source_code\n        , \n\n    cast( null as string ) as admit_type_code\n        , \n\n    cast( null as string ) as discharge_disposition_code\n        , \n\n    cast( null as string ) as place_of_service_code\n        , \n\n    cast( null as string ) as bill_type_code\n        , \n\n    cast( null as string ) as ms_drg\n        , \n\n    cast( null as string ) as revenue_center_code\n        , \n\n    cast( null as string ) as service_unit_quantity\n        , \n\n    cast( null as string ) as hcpcs_code\n        , \n\n    cast( null as string ) as hcpcs_modifier_1\n        , \n\n    cast( null as string ) as hcpcs_modifier_2\n        , \n\n    cast( null as string ) as hcpcs_modifier_3\n        , \n\n    cast( null as string ) as hcpcs_modifier_4\n        , \n\n    cast( null as string ) as hcpcs_modifier_5\n        , \n\n    cast( null as string ) as rendering_npi\n        , \n\n    cast( null as string ) as billing_npi\n        , \n\n    cast( null as string ) as facility_npi\n        , cast(null as date) as paid_date\n        , \n\n    cast( null as string ) as paid_amount\n        , \n\n    cast( null as string ) as allowed_amount\n        , \n\n    cast( null as string ) as charge_amount\n        , \n\n    cast( null as string ) as diagnosis_code_type\n        , \n\n    cast( null as string ) as diagnosis_code_1\n        , \n\n    cast( null as string ) as diagnosis_code_2\n        , \n\n    cast( null as string ) as diagnosis_code_3\n        , \n\n    cast( null as string ) as diagnosis_code_4\n        , \n\n    cast( null as string ) as diagnosis_code_5\n        , \n\n    cast( null as string ) as diagnosis_code_6\n        , \n\n    cast( null as string ) as diagnosis_code_7\n        , \n\n    cast( null as string ) as diagnosis_code_8\n        , \n\n    cast( null as string ) as diagnosis_code_9\n        , \n\n    cast( null as string ) as diagnosis_code_10\n        , \n\n    cast( null as string ) as diagnosis_code_11\n        , \n\n    cast( null as string ) as diagnosis_code_12\n        , \n\n    cast( null as string ) as diagnosis_code_13\n        , \n\n    cast( null as string ) as diagnosis_code_14\n        , \n\n    cast( null as string ) as diagnosis_code_15\n        , \n\n    cast( null as string ) as diagnosis_code_16\n        , \n\n    cast( null as string ) as diagnosis_code_17\n        , \n\n    cast( null as string ) as diagnosis_code_18\n        , \n\n    cast( null as string ) as diagnosis_code_19\n        , \n\n    cast( null as string ) as diagnosis_code_20\n        , \n\n    cast( null as string ) as diagnosis_code_21\n        , \n\n    cast( null as string ) as diagnosis_code_22\n        , \n\n    cast( null as string ) as diagnosis_code_23\n        , \n\n    cast( null as string ) as diagnosis_code_24\n        , \n\n    cast( null as string ) as diagnosis_code_25\n        , \n\n    cast( null as string ) as diagnosis_poa_1\n        , \n\n    cast( null as string ) as diagnosis_poa_2\n        , \n\n    cast( null as string ) as diagnosis_poa_3\n        , \n\n    cast( null as string ) as diagnosis_poa_4\n        , \n\n    cast( null as string ) as diagnosis_poa_5\n        , \n\n    cast( null as string ) as diagnosis_poa_6\n        , \n\n    cast( null as string ) as diagnosis_poa_7\n        , \n\n    cast( null as string ) as diagnosis_poa_8\n        , \n\n    cast( null as string ) as diagnosis_poa_9\n        , \n\n    cast( null as string ) as diagnosis_poa_10\n        , \n\n    cast( null as string ) as diagnosis_poa_11\n        , \n\n    cast( null as string ) as diagnosis_poa_12\n        , \n\n    cast( null as string ) as diagnosis_poa_13\n        , \n\n    cast( null as string ) as diagnosis_poa_14\n        , \n\n    cast( null as string ) as diagnosis_poa_15\n        , \n\n    cast( null as string ) as diagnosis_poa_16\n        , \n\n    cast( null as string ) as diagnosis_poa_17\n        , \n\n    cast( null as string ) as diagnosis_poa_18\n        , \n\n    cast( null as string ) as diagnosis_poa_19\n        , \n\n    cast( null as string ) as diagnosis_poa_20\n        , \n\n    cast( null as string ) as diagnosis_poa_21\n        , \n\n    cast( null as string ) as diagnosis_poa_22\n        , \n\n    cast( null as string ) as diagnosis_poa_23\n        , \n\n    cast( null as string ) as diagnosis_poa_24\n        , \n\n    cast( null as string ) as diagnosis_poa_25\n        , \n\n    cast( null as string ) as procedure_code_type\n        , \n\n    cast( null as string ) as procedure_code_1\n        , \n\n    cast( null as string ) as procedure_code_2\n        , \n\n    cast( null as string ) as procedure_code_3\n        , \n\n    cast( null as string ) as procedure_code_4\n        , \n\n    cast( null as string ) as procedure_code_5\n        , \n\n    cast( null as string ) as procedure_code_6\n        , \n\n    cast( null as string ) as procedure_code_7\n        , \n\n    cast( null as string ) as procedure_code_8\n        , \n\n    cast( null as string ) as procedure_code_9\n        , \n\n    cast( null as string ) as procedure_code_10\n        , \n\n    cast( null as string ) as procedure_code_11\n        , \n\n    cast( null as string ) as procedure_code_12\n        , \n\n    cast( null as string ) as procedure_code_13\n        , \n\n    cast( null as string ) as procedure_code_14\n        , \n\n    cast( null as string ) as procedure_code_15\n        , \n\n    cast( null as string ) as procedure_code_16\n        , \n\n    cast( null as string ) as procedure_code_17\n        , \n\n    cast( null as string ) as procedure_code_18\n        , \n\n    cast( null as string ) as procedure_code_19\n        , \n\n    cast( null as string ) as procedure_code_20\n        , \n\n    cast( null as string ) as procedure_code_21\n        , \n\n    cast( null as string ) as procedure_code_22\n        , \n\n    cast( null as string ) as procedure_code_23\n        , \n\n    cast( null as string ) as procedure_code_24\n        , \n\n    cast( null as string ) as procedure_code_25\n        , \n\n    cast( null as string ) as procedure_date_1\n        , \n\n    cast( null as string ) as procedure_date_2\n        , \n\n    cast( null as string ) as procedure_date_3\n        , \n\n    cast( null as string ) as procedure_date_4\n        , \n\n    cast( null as string ) as procedure_date_5\n        , \n\n    cast( null as string ) as procedure_date_6\n        , \n\n    cast( null as string ) as procedure_date_7\n        , \n\n    cast( null as string ) as procedure_date_8\n        , \n\n    cast( null as string ) as procedure_date_9\n        , \n\n    cast( null as string ) as procedure_date_10\n        , \n\n    cast( null as string ) as procedure_date_11\n        , \n\n    cast( null as string ) as procedure_date_12\n        , \n\n    cast( null as string ) as procedure_date_13\n        , \n\n    cast( null as string ) as procedure_date_14\n        , \n\n    cast( null as string ) as procedure_date_15\n        , \n\n    cast( null as string ) as procedure_date_16\n        , \n\n    cast( null as string ) as procedure_date_17\n        , \n\n    cast( null as string ) as procedure_date_18\n        , \n\n    cast( null as string ) as procedure_date_19\n        , \n\n    cast( null as string ) as procedure_date_20\n        , \n\n    cast( null as string ) as procedure_date_21\n        , \n\n    cast( null as string ) as procedure_date_22\n        , \n\n    cast( null as string ) as procedure_date_23\n        , \n\n    cast( null as string ) as procedure_date_24\n        , \n\n    cast( null as string ) as procedure_date_25\n        , \n\n    cast( null as string ) as data_source\n    limit 0\n\n),\n\nmedical_claim_with_row_hash as (\n\n    select *\n         , md5(cast(coalesce(cast(claim_id as \n    varchar\n), '') || '-' || coalesce(cast(claim_line_number as \n    varchar\n), '') || '-' || coalesce(cast(claim_type as \n    varchar\n), '') || '-' || coalesce(cast(patient_id as \n    varchar\n), '') || '-' || coalesce(cast(member_id as \n    varchar\n), '') || '-' || coalesce(cast(claim_start_date as \n    varchar\n), '') || '-' || coalesce(cast(claim_end_date as \n    varchar\n), '') || '-' || coalesce(cast(claim_line_start_date as \n    varchar\n), '') || '-' || coalesce(cast(claim_line_end_date as \n    varchar\n), '') || '-' || coalesce(cast(admission_date as \n    varchar\n), '') || '-' || coalesce(cast(discharge_date as \n    varchar\n), '') || '-' || coalesce(cast(admit_source_code as \n    varchar\n), '') || '-' || coalesce(cast(admit_type_code as \n    varchar\n), '') || '-' || coalesce(cast(discharge_disposition_code as \n    varchar\n), '') || '-' || coalesce(cast(place_of_service_code as \n    varchar\n), '') || '-' || coalesce(cast(bill_type_code as \n    varchar\n), '') || '-' || coalesce(cast(ms_drg as \n    varchar\n), '') || '-' || coalesce(cast(revenue_center_code as \n    varchar\n), '') || '-' || coalesce(cast(service_unit_quantity as \n    varchar\n), '') || '-' || coalesce(cast(hcpcs_code as \n    varchar\n), '') || '-' || coalesce(cast(hcpcs_modifier_1 as \n    varchar\n), '') || '-' || coalesce(cast(hcpcs_modifier_2 as \n    varchar\n), '') || '-' || coalesce(cast(hcpcs_modifier_3 as \n    varchar\n), '') || '-' || coalesce(cast(hcpcs_modifier_4 as \n    varchar\n), '') || '-' || coalesce(cast(hcpcs_modifier_5 as \n    varchar\n), '') || '-' || coalesce(cast(rendering_npi as \n    varchar\n), '') || '-' || coalesce(cast(billing_npi as \n    varchar\n), '') || '-' || coalesce(cast(facility_npi as \n    varchar\n), '') || '-' || coalesce(cast(paid_date as \n    varchar\n), '') || '-' || coalesce(cast(paid_amount as \n    varchar\n), '') || '-' || coalesce(cast(allowed_amount as \n    varchar\n), '') || '-' || coalesce(cast(charge_amount as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_type as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_1 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_2 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_3 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_4 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_5 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_6 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_7 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_8 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_9 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_10 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_11 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_12 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_13 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_14 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_15 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_16 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_17 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_18 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_19 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_20 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_21 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_22 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_23 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_24 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_code_25 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_1 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_2 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_3 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_4 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_5 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_6 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_7 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_8 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_9 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_10 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_11 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_12 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_13 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_14 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_15 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_16 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_17 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_18 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_19 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_20 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_21 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_22 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_23 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_24 as \n    varchar\n), '') || '-' || coalesce(cast(diagnosis_poa_25 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_type as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_1 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_2 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_3 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_4 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_5 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_6 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_7 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_8 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_9 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_10 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_11 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_12 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_13 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_14 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_15 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_16 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_17 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_18 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_19 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_20 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_21 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_22 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_23 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_24 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_code_25 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_1 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_2 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_3 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_4 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_5 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_6 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_7 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_8 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_9 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_10 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_11 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_12 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_13 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_14 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_15 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_16 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_17 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_18 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_19 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_20 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_21 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_22 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_23 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_24 as \n    varchar\n), '') || '-' || coalesce(cast(procedure_date_25 as \n    varchar\n), '') || '-' || coalesce(cast(data_source as \n    varchar\n), '') as \n    varchar\n))\n           as row_hash\n    from medical_claim_src\n\n)\n\nselect * from medical_claim_with_row_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.base_medical_claim"}, "snapshot.data_profiling.snapshot_eligibility_detail": {"raw_sql": "\n\n{{\n    config(\n        target_database = var('output_database')\n      , target_schema = var('output_schema')\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'patient_id||member_id||enrollment_start_date||enrollment_end_date||payer||payer_type||run_date'\n    )\n}}\n\nselect * from {{ ref('eligibility_detail') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.data_profiling.eligibility_detail"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "patient_id||member_id||enrollment_start_date||enrollment_end_date||payer||payer_type||run_date", "on_schema_change": "ignore", "strategy": "timestamp", "target_schema": "data_profiling", "target_database": "tuva", "updated_at": "run_date", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "snapshot_eligibility_detail", "snapshot_eligibility_detail"], "unique_id": "snapshot.data_profiling.snapshot_eligibility_detail", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "snapshot_eligibility_detail.sql", "original_file_path": "snapshots/snapshot_eligibility_detail.sql", "name": "snapshot_eligibility_detail", "alias": "snapshot_eligibility_detail", "checksum": {"name": "sha256", "checksum": "f9f514026da6c8480a17f071396c4ff6600b45365e74c797c48dc91bb3c4b41c"}, "tags": [], "refs": [["eligibility_detail"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "tuva", "target_schema": "data_profiling", "strategy": "timestamp", "updated_at": "run_date", "unique_key": "patient_id||member_id||enrollment_start_date||enrollment_end_date||payer||payer_type||run_date"}, "created_at": 1667409880.4841988, "compiled_sql": "\n\n\n\nselect * from tuva.data_profiling.eligibility_detail\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.snapshot_eligibility_detail"}, "snapshot.data_profiling.snapshot_pharmacy_claim_detail": {"raw_sql": "\n\n{{\n    config(\n        target_database = var('output_database')\n      , target_schema = var('output_schema')\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'claim_id||claim_line_number||run_date'\n    )\n}}\n\nselect * from {{ ref('pharmacy_claim_detail') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.data_profiling.pharmacy_claim_detail"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "claim_id||claim_line_number||run_date", "on_schema_change": "ignore", "strategy": "timestamp", "target_schema": "data_profiling", "target_database": "tuva", "updated_at": "run_date", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "snapshot_pharmacy_claim_detail", "snapshot_pharmacy_claim_detail"], "unique_id": "snapshot.data_profiling.snapshot_pharmacy_claim_detail", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "snapshot_pharmacy_claim_detail.sql", "original_file_path": "snapshots/snapshot_pharmacy_claim_detail.sql", "name": "snapshot_pharmacy_claim_detail", "alias": "snapshot_pharmacy_claim_detail", "checksum": {"name": "sha256", "checksum": "e7b7a23828c97e62cbeb3db4d764549aacb0f75bed55d61a652c6083c4bd52f4"}, "tags": [], "refs": [["pharmacy_claim_detail"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "tuva", "target_schema": "data_profiling", "strategy": "timestamp", "updated_at": "run_date", "unique_key": "claim_id||claim_line_number||run_date"}, "created_at": 1667409880.488412, "compiled_sql": "\n\n\n\nselect * from tuva.data_profiling.pharmacy_claim_detail\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.snapshot_pharmacy_claim_detail"}, "snapshot.data_profiling.snapshot_medical_claim_detail": {"raw_sql": "\n\n{{\n    config(\n        target_database = var('output_database')\n      , target_schema = var('output_schema')\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'claim_id||claim_line_number||run_date'\n    )\n}}\n\nselect * from {{ ref('medical_claim_detail') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.data_profiling.medical_claim_detail"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "claim_id||claim_line_number||run_date", "on_schema_change": "ignore", "strategy": "timestamp", "target_schema": "data_profiling", "target_database": "tuva", "updated_at": "run_date", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "snapshot_medical_claim_detail", "snapshot_medical_claim_detail"], "unique_id": "snapshot.data_profiling.snapshot_medical_claim_detail", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "snapshot_medical_claim_detail.sql", "original_file_path": "snapshots/snapshot_medical_claim_detail.sql", "name": "snapshot_medical_claim_detail", "alias": "snapshot_medical_claim_detail", "checksum": {"name": "sha256", "checksum": "bb4d4e5da58e10c05ce2c094e5aa967ae99e21ddf09e31ca38f181d1ebcf79d7"}, "tags": [], "refs": [["medical_claim_detail"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "tuva", "target_schema": "data_profiling", "strategy": "timestamp", "updated_at": "run_date", "unique_key": "claim_id||claim_line_number||run_date"}, "created_at": 1667409880.490836, "compiled_sql": "\n\n\n\nselect * from tuva.data_profiling.medical_claim_detail\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.snapshot_medical_claim_detail"}, "snapshot.data_profiling.snapshot_claim_summary": {"raw_sql": "\n\n{{\n    config(\n        target_database = var('output_database')\n      , target_schema = var('output_schema')\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'test_name||run_date'\n    )\n}}\n\nselect * from {{ ref('claim_summary') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.data_profiling.claim_summary"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "test_name||run_date", "on_schema_change": "ignore", "strategy": "timestamp", "target_schema": "data_profiling", "target_database": "tuva", "updated_at": "run_date", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "snapshot_claim_summary", "snapshot_claim_summary"], "unique_id": "snapshot.data_profiling.snapshot_claim_summary", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "snapshot_claim_summary.sql", "original_file_path": "snapshots/snapshot_claim_summary.sql", "name": "snapshot_claim_summary", "alias": "snapshot_claim_summary", "checksum": {"name": "sha256", "checksum": "32a52dcdd42c53c4ca88837bd9e44b79b4ac8c5a5ce8225c89fa1cda932fe263"}, "tags": [], "refs": [["claim_summary"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "tuva", "target_schema": "data_profiling", "strategy": "timestamp", "updated_at": "run_date", "unique_key": "test_name||run_date"}, "created_at": 1667409880.493098, "compiled_sql": "\n\n\n\nselect * from tuva.data_profiling.claim_summary\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.snapshot_claim_summary"}, "seed.data_profiling.gender": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "terminology", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["data_profiling", "gender"], "unique_id": "seed.data_profiling.gender", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "gender.csv", "original_file_path": "seeds/gender.csv", "name": "gender", "alias": "gender", "checksum": {"name": "sha256", "checksum": "85ad95c8db48faf3d36084740aaac18e7eeb889c0ce789eeb1ee913a67c1c2c0"}, "tags": [], "refs": [], "sources": [], "description": "Dataset from the Tuva Terminology repo", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.571116, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.gender"}, "seed.data_profiling.place_of_service": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "terminology", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"place_of_service_code": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["data_profiling", "place_of_service"], "unique_id": "seed.data_profiling.place_of_service", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "place_of_service.csv", "original_file_path": "seeds/place_of_service.csv", "name": "place_of_service", "alias": "place_of_service", "checksum": {"name": "sha256", "checksum": "5a2ab2ea4af5fa1971c4132b6e85938a7c3a6e4bc158afdaef55bf753fc82228"}, "tags": [], "refs": [], "sources": [], "description": "Dataset from the Tuva Terminology repo", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.57565, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.place_of_service"}, "seed.data_profiling.ms_drg": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "terminology", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"CODE": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["data_profiling", "ms_drg"], "unique_id": "seed.data_profiling.ms_drg", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "ms_drg.csv", "original_file_path": "seeds/ms_drg.csv", "name": "ms_drg", "alias": "ms_drg", "checksum": {"name": "sha256", "checksum": "d8da6bd684cd3fed0a93359aa4bf1d5d7ef4f325cac1e474ecd19f845be931b1"}, "tags": [], "refs": [], "sources": [], "description": "Dataset from the Tuva Terminology repo", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.573952, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.ms_drg"}, "seed.data_profiling.revenue_center_code": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "terminology", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"revenue_center_code": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["data_profiling", "revenue_center_code"], "unique_id": "seed.data_profiling.revenue_center_code", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "revenue_center_code.csv", "original_file_path": "seeds/revenue_center_code.csv", "name": "revenue_center_code", "alias": "revenue_center_code", "checksum": {"name": "sha256", "checksum": "d0fe4792dcd2db884c09fc8dcc2d98f3e7422d65fdb2068748c07358189a972b"}, "tags": [], "refs": [], "sources": [], "description": "Dataset from the Tuva Terminology repo", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.578719, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.revenue_center_code"}, "seed.data_profiling.test_catalog": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "data_profiling", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"test_id": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "test_catalog"], "unique_id": "seed.data_profiling.test_catalog", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "test_catalog.csv", "original_file_path": "seeds/test_catalog.csv", "name": "test_catalog", "alias": "test_catalog", "checksum": {"name": "sha256", "checksum": "ce99da6a8db65a60179d83a640546882e10860492ab273e6f00a4af9d99822f2"}, "tags": [], "refs": [], "sources": [], "description": "A complete list of all data profiling tests", "columns": {"test_id": {"name": "test_id", "description": "Unique identifier for the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_name": {"name": "test_name", "description": "Unique column name of the test\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Guideline or reasoning for the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_table_name": {"name": "test_table_name", "description": "The name of the data profiling detail table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_table_name": {"name": "source_table_name", "description": "The name of the source table the test is ran on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "columns": {"name": "columns", "description": "List of column(s) the test is ran on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grain": {"name": "grain", "description": "Grain the test is ran on (table name or column name), may not always be the same as the table grain\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "record_source": {"name": "record_source", "description": "Source of records the test is ran on  (e.g. all claims, institutional claims, etc.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Category or class of test (e.g. data type, unique, missing, etc.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "severity": {"name": "severity", "description": "Indicates the severity of a test failure (1-high, 2-medium, 3-low)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.5822778, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.test_catalog"}, "seed.data_profiling.discharge_disposition": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "terminology", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"discharge_disposition_code": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["data_profiling", "discharge_disposition"], "unique_id": "seed.data_profiling.discharge_disposition", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "discharge_disposition.csv", "original_file_path": "seeds/discharge_disposition.csv", "name": "discharge_disposition", "alias": "discharge_disposition", "checksum": {"name": "sha256", "checksum": "bb28ddd159e53b04b50db965c381ac32919ee35e2c849fc8eb8422b9000c61c6"}, "tags": [], "refs": [], "sources": [], "description": "Dataset from the Tuva Terminology repo", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.569794, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.discharge_disposition"}, "seed.data_profiling.icd_10_cm": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "terminology", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["data_profiling", "icd_10_cm"], "unique_id": "seed.data_profiling.icd_10_cm", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "icd_10_cm.csv", "original_file_path": "seeds/icd_10_cm.csv", "name": "icd_10_cm", "alias": "icd_10_cm", "checksum": {"name": "path", "checksum": "seeds/icd_10_cm.csv"}, "tags": [], "refs": [], "sources": [], "description": "Dataset from the Tuva Terminology repo", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.572355, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_cm"}, "seed.data_profiling.claim_type": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "terminology", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["data_profiling", "claim_type"], "unique_id": "seed.data_profiling.claim_type", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "claim_type.csv", "original_file_path": "seeds/claim_type.csv", "name": "claim_type", "alias": "claim_type", "checksum": {"name": "sha256", "checksum": "2b4b4d3ba1ca12bc26748c93c2cfa00a73ffdad7ebc7b61a2306c832d093ccce"}, "tags": [], "refs": [], "sources": [], "description": "Dataset from the Tuva Terminology repo", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.567889, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.claim_type"}, "seed.data_profiling.present_on_admission": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "terminology", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["data_profiling", "present_on_admission"], "unique_id": "seed.data_profiling.present_on_admission", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "present_on_admission.csv", "original_file_path": "seeds/present_on_admission.csv", "name": "present_on_admission", "alias": "present_on_admission", "checksum": {"name": "sha256", "checksum": "9b8879444128ac2f46d421f1e7ec1fa6e2509100b377cbabd15e9dd0cea9b2a0"}, "tags": [], "refs": [], "sources": [], "description": "Dataset from the Tuva Terminology repo", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.576969, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.present_on_admission"}, "seed.data_profiling.bill_type": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "terminology", "database": "tuva", "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"CODE": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["data_profiling", "bill_type"], "unique_id": "seed.data_profiling.bill_type", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "bill_type.csv", "original_file_path": "seeds/bill_type.csv", "name": "bill_type", "alias": "bill_type", "checksum": {"name": "sha256", "checksum": "542cd5a2149e94ab76d3c8e977d733e46ff6edff91b00f2c56c5eed37a994760"}, "tags": [], "refs": [], "sources": [], "description": "Dataset from the Tuva Terminology repo", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data_profiling://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.566776, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.bill_type"}, "test.data_profiling.unique_eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.7f43706bb2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_eligibility_detail_1d329223a9bf2492cf710c5bc17ca609\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id||'-'||member_id||'-'||enrollment_start_date||'-'||enrollment_end_date||'-'||payer||'-'||payer_type)", "model": "{{ get_where_subquery(ref('eligibility_detail')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.data_profiling.eligibility_detail"]}, "config": {"enabled": true, "alias": "unique_eligibility_detail_1d329223a9bf2492cf710c5bc17ca609", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "claims_input_layer", "config", "unique_eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_"], "unique_id": "test.data_profiling.unique_eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.7f43706bb2", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "unique_eligibility_detail_1d329223a9bf2492cf710c5bc17ca609.sql", "original_file_path": "models/claims_input_layer/config/eligibility_detail.yml", "name": "unique_eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_", "alias": "unique_eligibility_detail_1d329223a9bf2492cf710c5bc17ca609", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["eligibility_detail"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/config/eligibility_detail.yml/unique_eligibility_detail_1d329223a9bf2492cf710c5bc17ca609.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_eligibility_detail_1d329223a9bf2492cf710c5bc17ca609"}, "created_at": 1667409880.5405262, "compiled_sql": "\n    \n    \n\nselect\n    (patient_id||'-'||member_id||'-'||enrollment_start_date||'-'||enrollment_end_date||'-'||payer||'-'||payer_type) as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.eligibility_detail\nwhere (patient_id||'-'||member_id||'-'||enrollment_start_date||'-'||enrollment_end_date||'-'||payer||'-'||payer_type) is not null\ngroup by (patient_id||'-'||member_id||'-'||enrollment_start_date||'-'||enrollment_end_date||'-'||payer||'-'||payer_type)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.eligibility_detail"}, "test.data_profiling.unique_claim_summary_test_name.1d787c785e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "test_name", "model": "{{ get_where_subquery(ref('claim_summary')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.data_profiling.claim_summary"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "claims_input_layer", "config", "unique_claim_summary_test_name"], "unique_id": "test.data_profiling.unique_claim_summary_test_name.1d787c785e", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "unique_claim_summary_test_name.sql", "original_file_path": "models/claims_input_layer/config/claim_summary.yml", "name": "unique_claim_summary_test_name", "alias": "unique_claim_summary_test_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claim_summary"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/config/claim_summary.yml/unique_claim_summary_test_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.546531, "compiled_sql": "\n    \n    \n\nselect\n    test_name as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.claim_summary\nwhere test_name is not null\ngroup by test_name\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_name", "file_key_name": "models.claim_summary"}, "test.data_profiling.unique_pharmacy_claim_detail__claim_id_claim_line_number_.872ff2891a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "(claim_id||'-'||claim_line_number)", "model": "{{ get_where_subquery(ref('pharmacy_claim_detail')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.data_profiling.pharmacy_claim_detail"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "claims_input_layer", "config", "unique_pharmacy_claim_detail__claim_id_claim_line_number_"], "unique_id": "test.data_profiling.unique_pharmacy_claim_detail__claim_id_claim_line_number_.872ff2891a", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "unique_pharmacy_claim_detail__claim_id_claim_line_number_.sql", "original_file_path": "models/claims_input_layer/config/pharmacy_claim_detail.yml", "name": "unique_pharmacy_claim_detail__claim_id_claim_line_number_", "alias": "unique_pharmacy_claim_detail__claim_id_claim_line_number_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pharmacy_claim_detail"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/config/pharmacy_claim_detail.yml/unique_pharmacy_claim_detail__claim_id_claim_line_number_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.552377, "compiled_sql": "\n    \n    \n\nselect\n    (claim_id||'-'||claim_line_number) as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.pharmacy_claim_detail\nwhere (claim_id||'-'||claim_line_number) is not null\ngroup by (claim_id||'-'||claim_line_number)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pharmacy_claim_detail"}, "test.data_profiling.unique_medical_claim_detail__claim_id_claim_line_number_.5a8236f3da": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "(claim_id||'-'||claim_line_number)", "model": "{{ get_where_subquery(ref('medical_claim_detail')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.data_profiling.medical_claim_detail"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "claims_input_layer", "config", "unique_medical_claim_detail__claim_id_claim_line_number_"], "unique_id": "test.data_profiling.unique_medical_claim_detail__claim_id_claim_line_number_.5a8236f3da", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "unique_medical_claim_detail__claim_id_claim_line_number_.sql", "original_file_path": "models/claims_input_layer/config/medical_claim_detail.yml", "name": "unique_medical_claim_detail__claim_id_claim_line_number_", "alias": "unique_medical_claim_detail__claim_id_claim_line_number_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["medical_claim_detail"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/data_profiling/models/claims_input_layer/config/medical_claim_detail.yml/unique_medical_claim_detail__claim_id_claim_line_number_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.56034, "compiled_sql": "\n    \n    \n\nselect\n    (claim_id||'-'||claim_line_number) as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.medical_claim_detail\nwhere (claim_id||'-'||claim_line_number) is not null\ngroup by (claim_id||'-'||claim_line_number)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.medical_claim_detail"}, "test.data_profiling.unique_test_catalog_test_id.a519e7bfc3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "test_id", "model": "{{ get_where_subquery(ref('test_catalog')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.data_profiling.test_catalog"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "unique_test_catalog_test_id"], "unique_id": "test.data_profiling.unique_test_catalog_test_id.a519e7bfc3", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "unique_test_catalog_test_id.sql", "original_file_path": "seeds/seeds.yml", "name": "unique_test_catalog_test_id", "alias": "unique_test_catalog_test_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["test_catalog"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/data_profiling/seeds/seeds.yml/unique_test_catalog_test_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.5827389, "compiled_sql": "\n    \n    \n\nselect\n    test_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.test_catalog\nwhere test_id is not null\ngroup by test_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_id", "file_key_name": "seeds.test_catalog"}, "test.data_profiling.not_null_test_catalog_test_id.994e564f86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_id", "model": "{{ get_where_subquery(ref('test_catalog')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.data_profiling.test_catalog"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "not_null_test_catalog_test_id"], "unique_id": "test.data_profiling.not_null_test_catalog_test_id.994e564f86", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "not_null_test_catalog_test_id.sql", "original_file_path": "seeds/seeds.yml", "name": "not_null_test_catalog_test_id", "alias": "not_null_test_catalog_test_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["test_catalog"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/data_profiling/seeds/seeds.yml/not_null_test_catalog_test_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.583584, "compiled_sql": "\n    \n    \n\n\n\nselect test_id\nfrom tuva.data_profiling.test_catalog\nwhere test_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_id", "file_key_name": "seeds.test_catalog"}, "test.data_profiling.unique_test_catalog_test_name.251ff71115": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "test_name", "model": "{{ get_where_subquery(ref('test_catalog')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.data_profiling.test_catalog"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "unique_test_catalog_test_name"], "unique_id": "test.data_profiling.unique_test_catalog_test_name.251ff71115", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "unique_test_catalog_test_name.sql", "original_file_path": "seeds/seeds.yml", "name": "unique_test_catalog_test_name", "alias": "unique_test_catalog_test_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["test_catalog"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/data_profiling/seeds/seeds.yml/unique_test_catalog_test_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.5842738, "compiled_sql": "\n    \n    \n\nselect\n    test_name as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.test_catalog\nwhere test_name is not null\ngroup by test_name\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_name", "file_key_name": "seeds.test_catalog"}, "test.data_profiling.not_null_test_catalog_test_name.b11a3948ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_name", "model": "{{ get_where_subquery(ref('test_catalog')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.data_profiling.test_catalog"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "not_null_test_catalog_test_name"], "unique_id": "test.data_profiling.not_null_test_catalog_test_name.b11a3948ad", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "not_null_test_catalog_test_name.sql", "original_file_path": "seeds/seeds.yml", "name": "not_null_test_catalog_test_name", "alias": "not_null_test_catalog_test_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["test_catalog"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/data_profiling/seeds/seeds.yml/not_null_test_catalog_test_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667409880.584979, "compiled_sql": "\n    \n    \n\n\n\nselect test_name\nfrom tuva.data_profiling.test_catalog\nwhere test_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_name", "file_key_name": "seeds.test_catalog"}}, "sources": {"source.data_profiling.cclf.eligibility": {"fqn": ["data_profiling", "cclf", "eligibility"], "database": "tuva", "schema": "claims_input", "unique_id": "source.data_profiling.cclf.eligibility", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "eligibility", "source_name": "cclf", "source_description": "", "loader": "", "identifier": "eligibility", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Year-month eligibility data per patient and payer. See documentation linked in the README for schema.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "tuva.claims_input.eligibility", "created_at": 1667409880.5854132}, "source.data_profiling.cclf.medical_claim": {"fqn": ["data_profiling", "cclf", "medical_claim"], "database": "tuva", "schema": "claims_input", "unique_id": "source.data_profiling.cclf.medical_claim", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "medical_claim", "source_name": "cclf", "source_description": "", "loader": "", "identifier": "medical_claim", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Line-level claims data, including revenue and HCPCS codes where each  claim id and claim line number is unique. See documentation linked  in the README for schema.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "tuva.claims_input.medical_claim", "created_at": 1667409880.585502}, "source.data_profiling.cclf.pharmacy_claim": {"fqn": ["data_profiling", "cclf", "pharmacy_claim"], "database": "tuva", "schema": "claims_input", "unique_id": "source.data_profiling.cclf.pharmacy_claim", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "pharmacy_claim", "source_name": "cclf", "source_description": "", "loader": "", "identifier": "pharmacy_claim", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Line-level pharmacy claims data where each claim id and claim line  number is unique. See documentation linked in the README for schema.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "tuva.claims_input.pharmacy_claim", "created_at": 1667409880.585561}}, "macros": {"macro.data_profiling.valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_birth_or_death_date_check.sql", "original_file_path": "macros/valid_birth_or_death_date_check.sql", "name": "valid_birth_or_death_date_check", "macro_sql": "\n\n{%- macro valid_birth_or_death_date_check(column_name) -%}\n\n    {{ return(adapter.dispatch('valid_birth_or_death_date_check')(column_name)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__valid_birth_or_death_date_check"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.934953}, "macro.data_profiling.bigquery__valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.bigquery__valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_birth_or_death_date_check.sql", "original_file_path": "macros/valid_birth_or_death_date_check.sql", "name": "bigquery__valid_birth_or_death_date_check", "macro_sql": "{%- macro bigquery__valid_birth_or_death_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when safe_cast({{ column_name }} as date) is not null\n        and safe_cast({{ column_name }} as date) between '1900-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.935222}, "macro.data_profiling.default__valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.default__valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_birth_or_death_date_check.sql", "original_file_path": "macros/valid_birth_or_death_date_check.sql", "name": "default__valid_birth_or_death_date_check", "macro_sql": "{%- macro default__valid_birth_or_death_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when try_cast({{ column_name }} as date) is not null\n        and try_cast({{ column_name }} as date) between '1900-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.935429}, "macro.data_profiling.redshift__valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.redshift__valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_birth_or_death_date_check.sql", "original_file_path": "macros/valid_birth_or_death_date_check.sql", "name": "redshift__valid_birth_or_death_date_check", "macro_sql": "{%- macro redshift__valid_birth_or_death_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when {{ column_name }} similar to '\\\\d{4}-\\\\d{2}-\\\\d{2}'\n        and cast({{ column_name }} as date) between '1900-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9356182}, "macro.data_profiling.snowflake__valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.snowflake__valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_birth_or_death_date_check.sql", "original_file_path": "macros/valid_birth_or_death_date_check.sql", "name": "snowflake__valid_birth_or_death_date_check", "macro_sql": "{%- macro snowflake__valid_birth_or_death_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when try_cast({{ column_name }} as date) is not null\n        and try_cast({{ column_name }} as date) between '1900-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.935816}, "macro.data_profiling.current_date_or_timestamp": {"unique_id": "macro.data_profiling.current_date_or_timestamp", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/current_date_or_timestamp.sql", "original_file_path": "macros/current_date_or_timestamp.sql", "name": "current_date_or_timestamp", "macro_sql": "\n\n{%- macro current_date_or_timestamp(date_format='date') -%}\n\n    {{ return(adapter.dispatch('current_date_or_timestamp')(date_format)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.936322}, "macro.data_profiling.bigquery__current_date_or_timestamp": {"unique_id": "macro.data_profiling.bigquery__current_date_or_timestamp", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/current_date_or_timestamp.sql", "original_file_path": "macros/current_date_or_timestamp.sql", "name": "bigquery__current_date_or_timestamp", "macro_sql": "{%- macro bigquery__current_date_or_timestamp(date_format) -%}\n\n    cast(current_timestamp as {{date_format }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.936429}, "macro.data_profiling.default__current_date_or_timestamp": {"unique_id": "macro.data_profiling.default__current_date_or_timestamp", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/current_date_or_timestamp.sql", "original_file_path": "macros/current_date_or_timestamp.sql", "name": "default__current_date_or_timestamp", "macro_sql": "{%- macro default__current_date_or_timestamp(date_format) %}\n\n    cast(current_timestamp() as {{date_format }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.936525}, "macro.data_profiling.redshift__current_date_or_timestamp": {"unique_id": "macro.data_profiling.redshift__current_date_or_timestamp", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/current_date_or_timestamp.sql", "original_file_path": "macros/current_date_or_timestamp.sql", "name": "redshift__current_date_or_timestamp", "macro_sql": "{%- macro redshift__current_date_or_timestamp(date_format) -%}\n\n    cast(getdate() as {{date_format }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.936624}, "macro.data_profiling.snowflake__current_date_or_timestamp": {"unique_id": "macro.data_profiling.snowflake__current_date_or_timestamp", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/current_date_or_timestamp.sql", "original_file_path": "macros/current_date_or_timestamp.sql", "name": "snowflake__current_date_or_timestamp", "macro_sql": "{%- macro snowflake__current_date_or_timestamp(date_format) %}\n\n    cast(current_timestamp() as {{date_format }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9367192}, "macro.data_profiling.missing_field_check": {"unique_id": "macro.data_profiling.missing_field_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/missing_field_check.sql", "original_file_path": "macros/missing_field_check.sql", "name": "missing_field_check", "macro_sql": "\n\n{%- macro missing_field_check(column_name) -%}\n\n    {{ return(adapter.dispatch('missing_field_check')(column_name)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__missing_field_check"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.937268}, "macro.data_profiling.bigquery__missing_field_check": {"unique_id": "macro.data_profiling.bigquery__missing_field_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/missing_field_check.sql", "original_file_path": "macros/missing_field_check.sql", "name": "bigquery__missing_field_check", "macro_sql": "{%- macro bigquery__missing_field_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null or cast({{ column_name }} as string) = '' then 1\n      else 0\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.937391}, "macro.data_profiling.default__missing_field_check": {"unique_id": "macro.data_profiling.default__missing_field_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/missing_field_check.sql", "original_file_path": "macros/missing_field_check.sql", "name": "default__missing_field_check", "macro_sql": "{%- macro default__missing_field_check(column_name) %}\n\n    case\n      when {{ column_name }} is null or cast({{ column_name }} as string) = '' then 1\n      else 0\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9375098}, "macro.data_profiling.redshift__missing_field_check": {"unique_id": "macro.data_profiling.redshift__missing_field_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/missing_field_check.sql", "original_file_path": "macros/missing_field_check.sql", "name": "redshift__missing_field_check", "macro_sql": "{%- macro redshift__missing_field_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null or cast({{ column_name }} as varchar) = '' then 1\n      else 0\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.937629}, "macro.data_profiling.snowflake__missing_field_check": {"unique_id": "macro.data_profiling.snowflake__missing_field_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/missing_field_check.sql", "original_file_path": "macros/missing_field_check.sql", "name": "snowflake__missing_field_check", "macro_sql": "{%- macro snowflake__missing_field_check(column_name) %}\n\n    case\n      when {{ column_name }} is null or cast({{ column_name }} as string) = '' then 1\n      else 0\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.93775}, "macro.data_profiling.valid_claim_date_check": {"unique_id": "macro.data_profiling.valid_claim_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_claim_date_check.sql", "original_file_path": "macros/valid_claim_date_check.sql", "name": "valid_claim_date_check", "macro_sql": "\n\n{%- macro valid_claim_date_check(column_name) -%}\n\n    {{ return(adapter.dispatch('valid_claim_date_check')(column_name)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__valid_claim_date_check"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.938632}, "macro.data_profiling.bigquery__valid_claim_date_check": {"unique_id": "macro.data_profiling.bigquery__valid_claim_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_claim_date_check.sql", "original_file_path": "macros/valid_claim_date_check.sql", "name": "bigquery__valid_claim_date_check", "macro_sql": "\n\n{%- macro bigquery__valid_claim_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when safe_cast({{ column_name }} as date) is not null\n        and safe_cast({{ column_name }} as date) between '2000-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9388318}, "macro.data_profiling.default__valid_claim_date_check": {"unique_id": "macro.data_profiling.default__valid_claim_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_claim_date_check.sql", "original_file_path": "macros/valid_claim_date_check.sql", "name": "default__valid_claim_date_check", "macro_sql": "{%- macro default__valid_claim_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when try_cast({{ column_name }} as date) is not null\n        and try_cast({{ column_name }} as date) between '2000-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.939028}, "macro.data_profiling.redshift__valid_claim_date_check": {"unique_id": "macro.data_profiling.redshift__valid_claim_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_claim_date_check.sql", "original_file_path": "macros/valid_claim_date_check.sql", "name": "redshift__valid_claim_date_check", "macro_sql": "{%- macro redshift__valid_claim_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when {{ column_name }} similar to '\\\\d{4}-\\\\d{2}-\\\\d{2}'\n        and cast({{ column_name }} as date) between '2000-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.939223}, "macro.data_profiling.snowflake__valid_claim_date_check": {"unique_id": "macro.data_profiling.snowflake__valid_claim_date_check", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/valid_claim_date_check.sql", "original_file_path": "macros/valid_claim_date_check.sql", "name": "snowflake__valid_claim_date_check", "macro_sql": "{%- macro snowflake__valid_claim_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when try_cast({{ column_name }} as date) is not null\n        and try_cast({{ column_name }} as date) between '2000-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.939472}, "macro.data_profiling.cast_string_or_varchar": {"unique_id": "macro.data_profiling.cast_string_or_varchar", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/cast_string_or_varchar.sql", "original_file_path": "macros/cast_string_or_varchar.sql", "name": "cast_string_or_varchar", "macro_sql": "\n\n{%- macro cast_string_or_varchar(column_name) -%}\n\n    {{ return(adapter.dispatch('cast_string_or_varchar')(column_name)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__cast_string_or_varchar"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.939894}, "macro.data_profiling.bigquery__cast_string_or_varchar": {"unique_id": "macro.data_profiling.bigquery__cast_string_or_varchar", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/cast_string_or_varchar.sql", "original_file_path": "macros/cast_string_or_varchar.sql", "name": "bigquery__cast_string_or_varchar", "macro_sql": "{%- macro bigquery__cast_string_or_varchar(column_name) -%}\n\n    cast( {{ column_name }} as string )\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.939996}, "macro.data_profiling.default__cast_string_or_varchar": {"unique_id": "macro.data_profiling.default__cast_string_or_varchar", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/cast_string_or_varchar.sql", "original_file_path": "macros/cast_string_or_varchar.sql", "name": "default__cast_string_or_varchar", "macro_sql": "{%- macro default__cast_string_or_varchar(column_name) %}\n\n    cast( {{ column_name }} as string )\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.940095}, "macro.data_profiling.redshift__cast_string_or_varchar": {"unique_id": "macro.data_profiling.redshift__cast_string_or_varchar", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/cast_string_or_varchar.sql", "original_file_path": "macros/cast_string_or_varchar.sql", "name": "redshift__cast_string_or_varchar", "macro_sql": "{%- macro redshift__cast_string_or_varchar(column_name) -%}\n\n    cast( {{ column_name }} as varchar )\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9401972}, "macro.data_profiling.snowflake__cast_string_or_varchar": {"unique_id": "macro.data_profiling.snowflake__cast_string_or_varchar", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/cast_string_or_varchar.sql", "original_file_path": "macros/cast_string_or_varchar.sql", "name": "snowflake__cast_string_or_varchar", "macro_sql": "{%- macro snowflake__cast_string_or_varchar(column_name) %}\n\n    cast( {{ column_name }} as string )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.940296}, "macro.data_profiling.generate_schema_name": {"unique_id": "macro.data_profiling.generate_schema_name", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {{ custom_schema_name }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9405062}, "macro.data_profiling.sum_all_checks_in_table": {"unique_id": "macro.data_profiling.sum_all_checks_in_table", "package_name": "data_profiling", "root_path": "/Users/sarah/tuva-project/data_profiling", "path": "macros/sum_all_checks_in_output_table.sql", "original_file_path": "macros/sum_all_checks_in_output_table.sql", "name": "sum_all_checks_in_table", "macro_sql": "{% macro sum_all_checks_in_table(table_name, column_list) %}\n\n    {%- set source_relation = adapter.get_relation(\n        database = var('output_database'),\n        schema = var('output_schema'),\n        identifier = table_name\n    ) -%}\n\n    {%- set current_table = source_relation -%}\n\n    {%- set all_columns = adapter.get_columns_in_relation(\n        current_table\n    ) -%}\n\n    {%- for column_item in all_columns\n        if column_item.name.lower() in column_list %}\n\n        select\n              '{{ table_name }}' as table_name\n            , '{{ column_item.name|lower }}' as test_name\n            , sum( {{ column_item.name }} ) as test_fail_numerator\n        from {{ current_table }}\n\n        {% if not loop.last -%}\n            union all\n        {%- endif -%}\n\n        {%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.941508}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9424498}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.953865}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.954245}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9547}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.955453}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.956234}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.956789}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9573078}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.957654}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9577332}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.957908}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.958011}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9581969}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.958449}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9586508}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.959168}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.959351}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.959827}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.960313}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.961142}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.961356}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9616}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.962848}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.963132}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.963389}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.965559}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9658701}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9665082}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.968019}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.969459}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9699972}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.97215}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9725912}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.973697}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9738991}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.974039}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9741812}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9743261}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.974741}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.975036}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9753358}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.975809}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.976081}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9795358}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.979709}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.979934}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9800801}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9801788}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.98095}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9811149}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.98129}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9822688}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.983841}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.987535}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.987822}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.987991}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.988075}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.988215}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9883242}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.988529}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.989407}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.989598}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.989846}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.99027}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.9956381}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.997674}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.998165}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.998466}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.998883}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409879.999257}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.000073}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.000614}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.001228}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.006021}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.007497}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.007787}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0085208}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0087879}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.009422}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.010108}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                  schema=schema,\n                                                                  database=database) %}\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.014878}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.019319}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0205498}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.021854}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.022639}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0265222}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.027045}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.027231}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0274282}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.027835}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.03139}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.031749}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.031968}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.033185}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.033588}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.033747}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0339258}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.034181}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.036997}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.040886}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0417888}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.042022}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0424871}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.042627}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.042736}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.042892}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.043005}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.043473}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0437162}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.044908}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.045351}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.045574}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0461261}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.046387}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.046666}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.047107}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.04736}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.047766}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.048117}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.048409}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.049005}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.050116}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.050682}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0509682}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0526552}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0540302}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.054761}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.054987}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.055404}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.055585}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.055742}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.055916}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.056412}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.056542}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0566971}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.057085}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0586581}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.058968}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.059148}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0593548}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.059542}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.059701}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0598989}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.06017}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.06042}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.061053}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0612822}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.061474}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.061992}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0621362}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.062358}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0627682}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.063442}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.063607}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.063804}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.063966}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0642319}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.064726}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.066228}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.066484}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0666711}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0668192}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0670002}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.067235}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0674329}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.067797}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.067981}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.068135}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0697238}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0698812}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0701828}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0703628}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.070693}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0709262}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.071531}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.071788}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.072556}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0731049}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.073333}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0736158}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0738869}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.074187}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0742579}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.07433}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0747058}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0748649}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.075159}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.075349}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.076038}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0761092}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0761778}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.076243}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.07631}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0764642}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.076535}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0766022}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0766668}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.07682}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.076888}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0769541}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.077106}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.077177}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0772421}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.077398}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.077464}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0775318}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.07774}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0778098}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0778759}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.078366}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0788019}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0789409}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0792441}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.079384}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.079484}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.079822}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.079925}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.080022}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.080595}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0807528}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.080914}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.081065}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.081252}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0815501}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.081625}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.081698}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.082069}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.082206}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0824}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.08253}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.083088}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0832179}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.083371}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0835252}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.085693}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0861042}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.086373}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.086752}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.087671}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0901482}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.090307}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0904589}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0922172}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.092418}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.092822}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.092959}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0930822}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0932019}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0935318}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0936792}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0938041}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.094154}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0942879}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.094411}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0949252}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.095031}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.095134}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.09549}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.095593}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.095701}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.096132}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.096282}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.096416}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.09679}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.096895}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0975401}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0976572}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.097724}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.097792}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0979462}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.098055}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0981991}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.098305}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.0984309}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.099819}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.100277}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.100728}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1009111}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.101318}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1014469}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.101571}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.101692}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.102056}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.102159}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.102315}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.102411}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.102987}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.103252}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1033962}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1037881}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.103961}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1053739}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1055338}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1057549}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.106099}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1064231}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.106775}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1071491}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1072729}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1073961}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.107933}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.108168}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.108305}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.108438}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1085691}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.109493}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.109898}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.110028}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.110209}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1103868}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.115925}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.11653}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.116852}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.117337}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.122383}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1228302}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.123306}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.123816}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.124463}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.124831}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1251452}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.125717}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.125947}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.126382}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.126676}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.12735}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.127682}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.128119}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.128442}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1288}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.12897}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1296058}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.130305}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1308742}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.131252}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.131702}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1318662}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.132246}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1324391}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.133064}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.133694}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.134277}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.134612}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.135117}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.135398}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1358552}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.136378}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.137054}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.137728}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1381838}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.138349}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.139103}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.139977}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.142933}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.144395}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.144713}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.144875}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1452448}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1454568}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.145801}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.145994}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1465442}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1473029}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1479208}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.148167}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.148524}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.148889}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.149305}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1499982}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1508448}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.151669}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.152082}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.152268}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.152792}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.153491}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1543329}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.154786}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.155065}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.155781}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.156758}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.158446}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.160557}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.163073}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.166131}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.166506}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1667662}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1692202}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.169439}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.169641}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.169824}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.169983}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1701498}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.170772}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.171711}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.172147}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.17244}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.172839}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.173185}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1747851}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.175062}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.175853}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.176353}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.177475}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.178983}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1800551}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.180892}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1814048}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.182137}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.182585}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.183189}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.183697}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.1837828}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.183868}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.183948}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.185}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.18528}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.185857}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/sarah/tuva-project/data_profiling/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667409880.186736}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.data_profiling.eligibility_detail": ["model.data_profiling.base_eligibility", "model.data_profiling.base_medical_claim", "seed.data_profiling.gender"], "model.data_profiling.medical_claim_detail": ["model.data_profiling.base_eligibility", "model.data_profiling.base_medical_claim", "seed.data_profiling.bill_type", "seed.data_profiling.claim_type", "seed.data_profiling.discharge_disposition", "seed.data_profiling.icd_10_cm", "seed.data_profiling.ms_drg", "seed.data_profiling.place_of_service", "seed.data_profiling.present_on_admission", "seed.data_profiling.revenue_center_code"], "model.data_profiling.pharmacy_claim_detail": ["model.data_profiling.base_eligibility", "model.data_profiling.base_pharmacy_claim"], "model.data_profiling.claim_summary": ["model.data_profiling.base_eligibility", "model.data_profiling.base_medical_claim", "model.data_profiling.base_medical_claim", "model.data_profiling.base_medical_claim", "model.data_profiling.base_pharmacy_claim", "model.data_profiling.eligibility_detail", "model.data_profiling.medical_claim_detail", "model.data_profiling.pharmacy_claim_detail", "seed.data_profiling.test_catalog", "source.data_profiling.cclf.eligibility", "source.data_profiling.cclf.medical_claim", "source.data_profiling.cclf.pharmacy_claim"], "model.data_profiling.base_pharmacy_claim": ["source.data_profiling.cclf.pharmacy_claim"], "model.data_profiling.base_eligibility": ["source.data_profiling.cclf.eligibility"], "model.data_profiling.base_medical_claim": ["source.data_profiling.cclf.medical_claim"], "snapshot.data_profiling.snapshot_eligibility_detail": ["model.data_profiling.eligibility_detail"], "snapshot.data_profiling.snapshot_pharmacy_claim_detail": ["model.data_profiling.pharmacy_claim_detail"], "snapshot.data_profiling.snapshot_medical_claim_detail": ["model.data_profiling.medical_claim_detail"], "snapshot.data_profiling.snapshot_claim_summary": ["model.data_profiling.claim_summary"], "seed.data_profiling.gender": [], "seed.data_profiling.place_of_service": [], "seed.data_profiling.ms_drg": [], "seed.data_profiling.revenue_center_code": [], "seed.data_profiling.test_catalog": [], "seed.data_profiling.discharge_disposition": [], "seed.data_profiling.icd_10_cm": [], "seed.data_profiling.claim_type": [], "seed.data_profiling.present_on_admission": [], "seed.data_profiling.bill_type": [], "test.data_profiling.unique_eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.7f43706bb2": ["model.data_profiling.eligibility_detail"], "test.data_profiling.unique_claim_summary_test_name.1d787c785e": ["model.data_profiling.claim_summary"], "test.data_profiling.unique_pharmacy_claim_detail__claim_id_claim_line_number_.872ff2891a": ["model.data_profiling.pharmacy_claim_detail"], "test.data_profiling.unique_medical_claim_detail__claim_id_claim_line_number_.5a8236f3da": ["model.data_profiling.medical_claim_detail"], "test.data_profiling.unique_test_catalog_test_id.a519e7bfc3": ["seed.data_profiling.test_catalog"], "test.data_profiling.not_null_test_catalog_test_id.994e564f86": ["seed.data_profiling.test_catalog"], "test.data_profiling.unique_test_catalog_test_name.251ff71115": ["seed.data_profiling.test_catalog"], "test.data_profiling.not_null_test_catalog_test_name.b11a3948ad": ["seed.data_profiling.test_catalog"], "source.data_profiling.cclf.eligibility": [], "source.data_profiling.cclf.medical_claim": [], "source.data_profiling.cclf.pharmacy_claim": []}, "child_map": {"model.data_profiling.eligibility_detail": ["model.data_profiling.claim_summary", "snapshot.data_profiling.snapshot_eligibility_detail", "test.data_profiling.unique_eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.7f43706bb2"], "model.data_profiling.medical_claim_detail": ["model.data_profiling.claim_summary", "snapshot.data_profiling.snapshot_medical_claim_detail", "test.data_profiling.unique_medical_claim_detail__claim_id_claim_line_number_.5a8236f3da"], "model.data_profiling.pharmacy_claim_detail": ["model.data_profiling.claim_summary", "snapshot.data_profiling.snapshot_pharmacy_claim_detail", "test.data_profiling.unique_pharmacy_claim_detail__claim_id_claim_line_number_.872ff2891a"], "model.data_profiling.claim_summary": ["snapshot.data_profiling.snapshot_claim_summary", "test.data_profiling.unique_claim_summary_test_name.1d787c785e"], "model.data_profiling.base_pharmacy_claim": ["model.data_profiling.claim_summary", "model.data_profiling.pharmacy_claim_detail"], "model.data_profiling.base_eligibility": ["model.data_profiling.claim_summary", "model.data_profiling.eligibility_detail", "model.data_profiling.medical_claim_detail", "model.data_profiling.pharmacy_claim_detail"], "model.data_profiling.base_medical_claim": ["model.data_profiling.claim_summary", "model.data_profiling.claim_summary", "model.data_profiling.claim_summary", "model.data_profiling.eligibility_detail", "model.data_profiling.medical_claim_detail"], "snapshot.data_profiling.snapshot_eligibility_detail": [], "snapshot.data_profiling.snapshot_pharmacy_claim_detail": [], "snapshot.data_profiling.snapshot_medical_claim_detail": [], "snapshot.data_profiling.snapshot_claim_summary": [], "seed.data_profiling.gender": ["model.data_profiling.eligibility_detail"], "seed.data_profiling.place_of_service": ["model.data_profiling.medical_claim_detail"], "seed.data_profiling.ms_drg": ["model.data_profiling.medical_claim_detail"], "seed.data_profiling.revenue_center_code": ["model.data_profiling.medical_claim_detail"], "seed.data_profiling.test_catalog": ["model.data_profiling.claim_summary", "test.data_profiling.not_null_test_catalog_test_id.994e564f86", "test.data_profiling.not_null_test_catalog_test_name.b11a3948ad", "test.data_profiling.unique_test_catalog_test_id.a519e7bfc3", "test.data_profiling.unique_test_catalog_test_name.251ff71115"], "seed.data_profiling.discharge_disposition": ["model.data_profiling.medical_claim_detail"], "seed.data_profiling.icd_10_cm": ["model.data_profiling.medical_claim_detail"], "seed.data_profiling.claim_type": ["model.data_profiling.medical_claim_detail"], "seed.data_profiling.present_on_admission": ["model.data_profiling.medical_claim_detail"], "seed.data_profiling.bill_type": ["model.data_profiling.medical_claim_detail"], "test.data_profiling.unique_eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.7f43706bb2": [], "test.data_profiling.unique_claim_summary_test_name.1d787c785e": [], "test.data_profiling.unique_pharmacy_claim_detail__claim_id_claim_line_number_.872ff2891a": [], "test.data_profiling.unique_medical_claim_detail__claim_id_claim_line_number_.5a8236f3da": [], "test.data_profiling.unique_test_catalog_test_id.a519e7bfc3": [], "test.data_profiling.not_null_test_catalog_test_id.994e564f86": [], "test.data_profiling.unique_test_catalog_test_name.251ff71115": [], "test.data_profiling.not_null_test_catalog_test_name.b11a3948ad": [], "source.data_profiling.cclf.eligibility": ["model.data_profiling.base_eligibility", "model.data_profiling.claim_summary"], "source.data_profiling.cclf.medical_claim": ["model.data_profiling.base_medical_claim", "model.data_profiling.claim_summary"], "source.data_profiling.cclf.pharmacy_claim": ["model.data_profiling.base_pharmacy_claim", "model.data_profiling.claim_summary"]}}